"use client";
import React from 'react';
import { FaMoneyBillAlt } from 'react-icons/fa';
import { RISK_ASSESSMENT_FIELDS } from '@/zod/SiteInfoFormSchema';
import UniversalFormField from '@/components/common/forms-new/core/UniversalFormField';
import ScrollableSection from '@/components/layout/ScrollbarSection';
import { FaChevronLeft, FaSpinner, FaCheckCircle } from "react-icons/fa";

/**
 * Simplified Risk Assessment Fields Component
 * Uses the parent form manager instead of creating its own
 */
const SiteRiskFormFields = ({ formManager }) =>
{
    // Add icons to field configurations
    const fieldsWithIcons = RISK_ASSESSMENT_FIELDS.map(field => ({
        ...field,
        Icon: field.name === 'Amount' ? FaMoneyBillAlt : undefined
    }));

    const { submitButtonEnabled } = formManager;


    return (
        <ScrollableSection className="h-auto 992px:w-full p-0 mx-auto 992px:h-[480px] 600px:pr-10">
            {fieldsWithIcons.map(field => (
                <UniversalFormField
                    key={field.name}
                    {...formManager.getFieldProps(field)}
                    theme="legacy-hazard"
                />
            ))}
            {/* Submit Button */}
            {submitButtonEnabled && (
                <div className="button-controls-container 480px:w-[80%] mx-auto mt-12">
                    <div className="button-section relative">
                        <button type="submit" disabled={formManager.isSubmitting}
                            className={`nextBtn ${formManager.isSubmitted
                                ? 'bg-[#4bb543]'
                                : 'bg-[#c6a54b] hover:opacity-80 cursor-pointer'
                                } text-white border-none py-[15px] 768px:px-0 text-[16px] w-full rounded-[40px] outline-none appearance-none p-2.5 shadow-none font-montserrat disabled:opacity-50 disabled:cursor-not-allowed`}>
                            {formManager.isSubmitting ? (
                                <div className="flex items-center justify-center">
                                    <FaSpinner className="animate-spin mr-2" />
                                    Submitting, please wait...
                                </div>
                            ) : formManager.isSubmitted ? (
                                <div className="flex items-center justify-center">
                                    <FaCheckCircle className="text-white mr-2" />
                                    Thank you, we received your submission!
                                </div>
                            ) : (
                                "Submit this location"
                            )}
                        </button>
                    </div>
                </div>
            )}
        </ScrollableSection>
    );
};


export default SiteRiskFormFields;

// ============= SIMPLIFIED SiteInfoForm.js - PRODUCTION READY =============
"use client";
import React from "react";
import { FaChevronLeft, FaSpinner, FaCheckCircle } from "react-icons/fa";
import Image from "next/image";
import Link from "next/link";
import { useFormManager } from '@/hooks/useFormManager';
import Typography from "@/components/common/Typography";
import Divider from "@/components/common/Divider";

// Import step components
import SiteBusinessStep from "./SiteInfo/steps/SiteBusinessStep";
import SiteContactStep from "./SiteInfo/steps/SiteContactStep";
import SiteServiceStep from "./SiteInfo/steps/SiteServiceStep";

// Import hazard form components
import SiteRiskFormFields from "./SiteRiskFormFields";

// UPDATED: Import the restructured schemas
import
    {
        UNIFIED_SITE_INFO_SCHEMA,
        UNIFIED_DEFAULT_VALUES
    } from '@/zod/SiteInfoFormSchema';
import ThankYouModal from "./ThankYouModal";

const SiteInfoForm = () =>
{
    // SIMPLIFIED: Single form manager for everything with proper schema structure
    const formManager = useFormManager({
        schema: UNIFIED_SITE_INFO_SCHEMA, // Now includes 'risk' step
        defaultValues: UNIFIED_DEFAULT_VALUES,
        formType: 'siteinfo',
        formId: 'SiteInfo',
        theme: 'hybrid',

        // Multi-step configuration
        multiStep: {
            steps: ['business', 'contact', 'service', 'risk'],
            conditional: false
        },

        // Hybrid enables hazard section after step 3
        hybrid: {
            enabled: true,
            reviewStep: 3,
            submitEnabled: false
        },

        onSuccess: (result, finalData) =>
        {
            console.log("Complete form submitted successfully!", finalData);
        },
        onError: (error) =>
        {
            console.error("Form submission failed:", error);
        },
        prepareData: async (data) =>
        {
            return { ...data, formType: "siteinfo" };
        }
    });

    const { stepId, currentStep, isFirst } = formManager.getCurrentStep();
    const { submitButtonEnabled } = formManager;

    // Focus hazard form when step completes to review
    React.useEffect(() =>
    {
        if (stepId === 'risk') {
            console.log('Reached review step - focusing hazard form');
            requestAnimationFrame(() =>
            {
                const firstHazardField = document.querySelector('.forms-franchise-v2 select:first-of-type');
                if (firstHazardField) {
                    firstHazardField.focus();
                    firstHazardField.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });
                }
            });
        }
    }, [stepId]);

    // SIMPLIFIED: Single submit handler for both forms
    const handleFormSubmit = async (e) =>
    {
        e.preventDefault();

        // The enhanced form manager handles both multi-step progression and final hybrid submission
        const result = await formManager.handleSubmit();
        return result;
    };

    // Step rendering
    const renderCurrentStep = () =>
    {
        const stepComponents = {
            business: SiteBusinessStep,
            contact: SiteContactStep,
            service: SiteServiceStep,
            risk: () => (
                <div className="h-full flex flex-col items-center justify-center gap-2">
                    <Typography as="h4" fontFamily="montserrat"
                        className="text-white font-normal text-center capitalize pb-4 text-[26px] leading-[30px]">
                        Review & Edit Previous Steps
                    </Typography>
                    <div>
                        <button type="button" onMouseDown={(e) =>
                        {
                            e.preventDefault();
                            e.stopPropagation();
                            formManager.goToStep(2);
                        }}
                            className="nextBtn bg-[#c6a54b] text-white border-none py-[15px] px-[50px] text-[17px] cursor-pointer w-full rounded-[40px] outline-none appearance-none hover:opacity-80 text-sm p-2.5 shadow-none font-montserrat">
                            Edit Form
                        </button>
                    </div>
                </div>
            )
        };

        const StepComponent = stepComponents[stepId];
        if (!StepComponent) return <div>Unknown step: {stepId}</div>;

        if (stepId === 'risk') return <StepComponent />;

        return <StepComponent formManager={formManager} theme="dark" />;
    };

    return (
        <>
            {/* Contact Content Section */}
            <div id="content-contact" className="bg-content-bg bg-center bg-no-repeat inline-block w-full 992px:my-[40px] 1280px:my-[120px]">
                <div className="inner-big w-[95%] max-w-[1366px] mx-auto my-0 992px:flex items-center">
                    <div className="right-contact-row w-[96%] 992px:w-1/2 mx-auto 992px:mx-0 pt-[35px] 992px:pt-0 [flex:1] 992px:pl-8">
                        <Typography as="h3" fontFamily="montserrat"
                            className="text-[22px] 480px:mt-10 font-semibold leading-[1.6em] mx-auto 992px:text-[26px] 768px:text-left 768px:mx-0">
                            Thanks for that! This is the final step in order to getting your service setup.
                        </Typography>

                        <Divider color="primary" alignment="left" margin="my-5" responsiveClassName="768px:text-left 768px:mx-0" />

                        <Typography as="p" fontFamily="montserrat"
                            className="text-[16px] leading-[2rem] text-left mb-4 768px:text-left font-light">
                            Please provide us with the necessary contact information and the service schedule
                            that you would like us to implement. Please note that this form needs to be submitted
                            once per location that you wish us to collect cash from or deliver cash to.
                        </Typography>

                        <Typography as="p" fontFamily="montserrat"
                            className="text-[16px] leading-[2rem] text-left mb-4 768px:text-left font-light">
                            If you are not after a regular collection but a once off collection fill out the form located{" "}
                            <span className="underline">
                                <strong className="uppercase">
                                    <a href="https://www.securecash.com.au/special-event/">HERE</a>
                                </strong>
                            </span>{" "}
                            instead.
                        </Typography>

                        <Typography as="p" fontFamily="montserrat"
                            className="text-[16px] leading-[2rem] text-left mb-4 768px:text-left font-light flex flex-col gap-4">
                            <span>
                                To learn more about how we manage information provided you can view our{" "}
                                <Link className="text-primary hover:underline" href="https://www.securecash.com.au/privacy-policy/">
                                    Privacy Policy
                                </Link>.
                            </span>
                            <strong>
                                <Link className="text-primary hover:underline" href="https://www.securecash.com.au/austrac/">
                                    &lt;&lt; Previous
                                </Link>
                            </strong>
                        </Typography>
                    </div>

                    <div className="[flex:1]">
                        {/* Multi-Step Form - Dark Theme */}
                        <div className="float-none w-full mx-auto relative left-0 flex-1 flex justify-center h-[844px]">
                            <form
                                className="forms-site-info h-auto px-[30px] 1366px:h-full submit-status mt-4 992px:mt-0 992px:mb-16 w-full lg:mt-0 lg:mb-0 992px:w-[450px] 1100px:w-[480px] 1200px:w-[500px] 1280px:w-[600px] shadow-[3px_3px_5px_0px_rgba(0,0,0,0.75)] text-center py-8 rounded-[6px] bg-[#1a1a1a] relative"
                                data-formid="SiteInfoMultiStep"
                                onSubmit={handleFormSubmit}
                                noValidate
                            >
                                {/* Back button */}
                                {!isFirst && stepId !== 'risk' && (
                                    <div className="form-slide-btn-wrap mb-4 absolute">
                                        <button type="button" onClick={formManager.goBack}
                                            className="flex items-center text-white hover:text-[#c6a54b] transition-colors">
                                            <FaChevronLeft className="mr-2" />
                                            <span>Back</span>
                                        </button>
                                    </div>
                                )}

                                {/* Current step */}
                                <div className={`${stepId === 'risk' && "h-full"}`}>
                                    {renderCurrentStep()}
                                </div>

                                {/* Next button */}
                                {stepId !== 'risk' && (
                                    <div className="button-controls-container w-[80%] mx-auto mt-7">
                                        <div className="button-section relative">
                                            <button type="submit" disabled={formManager.isSubmitting}
                                                className="nextBtn bg-[#c6a54b] text-white border-none py-[15px] px-[50px] text-[17px] cursor-pointer w-full rounded-[40px] outline-none appearance-none hover:opacity-80 text-sm p-2.5 shadow-none font-montserrat disabled:opacity-50">
                                                {formManager.isSubmitting ? (
                                                    <div className="flex items-center justify-center">
                                                        <FaSpinner className="animate-spin mr-2" />
                                                        Processing...
                                                    </div>
                                                ) : currentStep === 2 ? "Continue" : "Next"}
                                            </button>
                                        </div>
                                    </div>
                                )}
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            {/* Hazard Form Section - Always Visible */}
            <div id="contact-form-section" className="inline-block w-full mb-12 480px:mb-[120px]">
                <div className="inner-big w-[95%] max-w-[1366px] mx-auto my-0 992px:flex">
                    <div className="414px:mx-4 hidden 992px:block 992px:w-[50%] 992px:mx-0 py-8 px-10 480px:px-[5%] 992px:pl-8 1280px:pl-24 992px:pt-32 shadow-[3px_3px_10px_0px_rgba(0,0,0,0.2)] rounded-t-[8px] 992px:rounded-l-[8px] 992px:rounded-tr-none relative">
                        <Image
                            src="https://www.securecash.com.au/images/welcome/terms-main-img-2.jpg"
                            alt="Making A Deal"
                            fill
                            objectFit="cover"
                        />
                    </div>

                    {/* SIMPLIFIED: Hazard Form - Uses same form manager and submit handler */}
                    <div className={`float-none 992px:w-[80%] 992px:float-left relative left-0 flex justify-center transition-opacity duration-300 ${!submitButtonEnabled ? 'opacity-50 pointer-events-none' : 'opacity-100'
                        }`}>
                        <form
                            className="forms-franchise-v2 rounded-r-[8px] shadow-[3px_3px_10px_0px_rgba(0,0,0,0.2)] h-auto 992px:mx-0 px-4 600px:px-8 480px:px-[5%] 1366px:h-full submit-status w-full lg:mt-0 lg:mb-0 text-center py-8 bg-[#f1f1f1] relative 1366px:pt-[74px] 1366px:pb-[84px]"
                            data-formid="SiteInfo"
                            style={{ background: "#f1f1f1" }}
                            onSubmit={handleFormSubmit}
                            noValidate
                        >
                            <div className="form-tab 480px:w-[90%] mx-auto">
                                <Typography as="h3" fontFamily="montserrat"
                                    className="text-[22px] font-semibold leading-[1.6em] mx-auto 992px:text-[26px] 768px:text-left 768px:mx-0">
                                    Site Risk Information
                                </Typography>

                                <Divider color="primary" alignment="left" margin="my-5" responsiveClassName="768px:text-left 768px:mx-0" />

                                <Typography as="p" fontFamily="montserrat"
                                    className="text-[16px] leading-[2rem] text-left 768px:mb-3 992px:mb-4 480px:mb-0 768px:text-left font-light">
                                    Please provide us with the information below so our Area Managers
                                    and Banking Couriers can better identify any potential hazards or
                                    dangers at this location.
                                </Typography>

                                {/* SIMPLIFIED: Risk Assessment Fields - uses same form manager */}
                                <SiteRiskFormFields formManager={formManager} />
                            </div>
                        </form>
                    </div>
                </div>

                {/* Error Display */}
                {formManager.submissionError && (
                    <div className="max-w-[1366px] mx-auto mt-4">
                        <div className="text-red-600 text-center mb-4 p-4 bg-red-50 border border-red-200 rounded mx-4">
                            <strong>Submission Error:</strong> {formManager.submissionError}
                            <button onClick={() => window.location.reload()}
                                className="ml-4 text-blue-600 hover:underline">
                                Retry
                            </button>
                        </div>
                    </div>
                )}
            </div>

            {/* Thank You Modal */}
            <ThankYouModal
                showThankYou={formManager.isSubmitted}
                setIsFormSubmitted={() => { }}
                type="Thankyou"
            />
        </>
    );
};

export default SiteInfoForm;

// /components/common/forms-new/core/FieldRenderer.js - ENHANCED FOR LEGACY THEME
import React, { useState, useEffect } from 'react';
import { TextInput, ABNInput, DateInput, SelectInput, TextareaInput, CheckboxGroupInput } from './SpecializedInputs';

/**
 * Enhanced FieldRenderer with Legacy Theme Support
 * Handles field rendering for all themes including legacy hazard form
 */
const FieldRenderer = ({
    type,
    field,
    fieldState,
    currentFocusField,
    onFieldFocus,
    onFieldBlur,
    // Field-specific props
    placeholder,
    hidden = false,
    Icon,
    Icon2,
    theme = 'dark',
    options = [], // for select
    rows = 3, // for textarea
    maxLength,
    // Date picker props
    dayPlaceholder = "DD",
    monthPlaceholder = "MM",
    yearPlaceholder = "YYYY",
    format = "dd/MM/yyyy",
    // Checkbox group props
    variant = 'horizontal',
    // NEW: Legacy theme props
    label,
    footnote,
    // Standard props
    disabled = false,
    required = false,
    autoComplete = "new-password",
    ...otherProps
}) =>
{
    const [isFocused, setIsFocused] = useState(false);

    // Extract field and error info from React Hook Form
    const { value, onChange, onBlur, name, ref } = field;
    const { error } = fieldState;
    const hasError = !!error;

    // Focus state management
    const isCurrentFocusField = currentFocusField === name;
    const isFieldFocused = isFocused || isCurrentFocusField;

    // Enhanced focus handler with global state sync
    const handleFocus = (e) =>
    {
        setIsFocused(true);

        if (onFieldFocus && typeof onFieldFocus === 'function') {
            onFieldFocus(name);
        }

        console.log(`Field focused: ${name}`);
    };

    // Enhanced blur handler with global state sync
    const handleBlur = (e) =>
    {
        setIsFocused(false);
        onBlur(e); // Call React Hook Form's onBlur

        if (onFieldBlur && typeof onFieldBlur === 'function') {
            onFieldBlur();
        }

        console.log(`Field blurred: ${name}`);
    };

    // Sync local focus state with global focus state
    useEffect(() =>
    {
        if (isCurrentFocusField && !isFocused) {
            setIsFocused(true);
        } else if (!isCurrentFocusField && isFocused) {
            if (currentFocusField !== null && currentFocusField !== name) {
                setIsFocused(false);
            }
        }
    }, [isCurrentFocusField, isFocused, currentFocusField, name]);

    // Common props for all input types
    const commonProps = {
        value,
        onChange,
        onFocus: handleFocus,
        onBlur: handleBlur,
        placeholder,
        theme,
        hasError,
        isFocused: isFieldFocused,
        disabled,
        required,
        autoComplete,
        ref,
        ...otherProps
    };

    // Legacy theme specific props for complex components
    const legacyProps = theme === 'legacy-hazard' ? {
        label,
        footnote,
        currentErrorField: isCurrentFocusField ? name : null,
        setCurrentErrorField: onFieldFocus,
    } : {};

    // Render appropriate input based on type
    switch (type) {
        case 'text':
        case 'email':
        case 'password':
        case 'tel':
        case 'url':
            return (
                <TextInput
                    {...commonProps}
                    type={type}
                    Icon={Icon || Icon2}
                    maxLength={maxLength}
                    hidden={hidden}
                />
            );

        case 'abn':
            return (
                <ABNInput
                    {...commonProps}
                    Icon={Icon || Icon2}
                />
            );

        case 'date':
            return (
                <DateInput
                    {...commonProps}
                    dayPlaceholder={dayPlaceholder}
                    monthPlaceholder={monthPlaceholder}
                    yearPlaceholder={yearPlaceholder}
                    format={format}
                />
            );

        case 'select':
            return (
                <SelectInput
                    {...commonProps}
                    options={options}
                    Icon={Icon || Icon2}
                    {...legacyProps} // Pass legacy-specific props for SelectInput
                />
            );

        case 'textarea':
            return (
                <TextareaInput
                    {...commonProps}
                    rows={rows}
                />
            );

        case 'number':
            return (
                <TextInput
                    {...commonProps}
                    type="number"
                    Icon={Icon || Icon2}
                    maxLength={maxLength}
                />
            );

        case 'checkbox-group':
            return (
                <CheckboxGroupInput
                    {...commonProps}
                    options={options}
                    name={field.name}
                    variant={variant}
                    {...legacyProps} // Pass legacy-specific props for CheckboxGroupInput
                />
            );

        default:
            console.warn(`Unknown field type: ${type}, falling back to text input`);
            return (
                <TextInput
                    {...commonProps}
                    type="text"
                    Icon={Icon || Icon2}
                    maxLength={maxLength}
                    hidden={hidden}
                />
            );
    }
};

export default FieldRenderer;
// /components/common/forms-new/core/SpecializedInputs.js - COMPLETE VERSION WITH LEGACY THEME
import Checkbox from "@/components/common/checkbox/Checkbox";
import React, { forwardRef, useImperativeHandle, useRef, useState, useEffect, useCallback } from 'react';
import DatePicker from "react-date-picker";
import 'react-date-picker/dist/DatePicker.css';
import 'react-calendar/dist/Calendar.css';
import { FaCalendarAlt, FaTimes, FaCircle } from "react-icons/fa";
import styles from "@/components/common/checkbox/Checkbox.module.css";

// COMPLETE THEMES - Including comprehensive legacy-hazard theme
const THEMES = {
    dark: {
        input: "w-full text-sm py-2 px-3 shadow-none font-montserrat border-none rounded-sm h-9",
        inputContainer: "relative w-full flex items-center bg-white rounded-[2px] border",
        textarea: "w-full text-sm rounded-md border border-gray-400 mb-2.5 p-4 shadow-none font-montserrat bg-white",
        select: "w-full text-sm rounded-md border border-white pl-12 shadow-none font-[Montserrat] bg-black text-white leading-6 h-9 appearance-none",
        selectContainer: "input-container input-container-select w-full mx-auto text-left flex items-center relative",
        selectIcon: "icon absolute text-[22px] rounded-l bg-black min-w-[20px] text-center ml-4",
        selectArrow: "rotate-45 inline-block border-solid border-white border-t-0 border-l-0 border-r-2 border-b-2 p-[3px] absolute right-5 top-1/2 transform -translate-y-1/2 group-hover:border-active-text",
        icon: "min-w-[50px] text-[18px] text-[#999]",
        datePicker: "w-full text-sm py-2 px-3 shadow-none font-montserrat border-none rounded-sm bg-white text-left leading-6 appearance-none",
        datePickerContainer: "relative w-full flex items-center bg-white rounded-[2px] border"
    },
    light: {
        input: "w-full text-sm py-2 px-3 shadow-none font-montserrat border-none rounded-sm h-9",
        inputContainer: "relative w-full flex items-center bg-white rounded-[2px] border",
        textarea: "w-full text-sm rounded-sm border-none p-4 shadow-none font-montserrat bg-white",
        select: "w-full text-sm rounded-sm border border-white pl-12 shadow-none font-[Montserrat] leading-6 h-9 appearance-none",
        selectContainer: "input-container input-container-select w-full mx-auto text-left flex items-center relative rounded-[2px] border",
        selectIcon: "icon absolute text-[18px] rounded-l min-w-[20px] text-center ml-4",
        selectArrow: "rotate-45 inline-block border-solid border-dark-border border-t-0 border-l-0 border-r-2 border-b-2 p-[3px] absolute right-5 top-1/2 transform -translate-y-1/2 group-hover:border-active-text",
        icon: "min-w-[50px] text-[18px] text-[#999]",
        datePicker: "w-full text-sm py-2 px-3 shadow-none font-montserrat border-none rounded-sm bg-white text-left leading-6 appearance-none",
        datePickerContainer: "relative w-full flex items-center bg-white rounded-[2px] border"
    },
    // COMPLETE: Pixel-perfect legacy theme matching original SiteRiskForm
    'legacy-hazard': {
        // Container structure
        fieldContainer: "relative",
        bulletPoint: "text-primary text-[8px] mt-3 mr-3 flex-shrink-0 absolute top-3",
        contentWrapper: "pl-4",

        // Label styling (consistent across all field types)
        label: "text-primary-text text-[16px] font-medium inline-block mt-4 mb-2 w-full text-left px-1 768px:px-0",

        // Select field styling - exact replica of SelectionBox
        selectContainer: "relative",
        selectInputContainer: "input-container input-container-select w-full mx-auto text-left flex items-center relative rounded-[2px] border",
        selectIcon: "icon absolute text-[18px] rounded-l min-w-[20px] text-center ml-4",
        select: "w-full text-sm rounded-sm border border-white pl-12 shadow-none leading-6 h-9 appearance-none",
        selectArrow: "rotate-45 inline-block border-solid border-dark-border border-t-0 border-l-0 border-r-2 border-b-2 p-[3px] absolute right-5 top-1/2 transform -translate-y-1/2 group-hover:border-active-text",
        selectFootnote: "text-sm text-gray-600 mt-2 italic",

        // Checkbox group styling - exact replica of CheckboxGroup  
        checkboxGroupContainer: "relative mt-4",
        checkboxGroupWrapper: "chkbox-container w-full mx-auto text-left relative",
        checkboxItem: "chkbox float-left text-left mt-2 mb-2 relative text-primary-text w-full",
        checkboxInput: "text-sm p-2.5 shadow-none font-montserrat border-none w-[28px] h-[28px] opacity-0 absolute z-40 peer",
        checkboxLabel: "font-light text-left w-full relative flex cursor-pointer",
        checkboxSpan: "w-[28px] h-[28px]",
        checkboxGroupFootnote: "text-sm text-gray-600 mt-2 italic"
    }
};

// ABN formatting utility
const formatABN = (value) =>
{
    if (!value) return '';
    const digitsOnly = value.replace(/\D/g, '');
    const limitedDigits = digitsOnly.slice(0, 11);

    let formattedValue = limitedDigits;
    if (limitedDigits.length > 2) {
        formattedValue = limitedDigits.slice(0, 2) + ' ' + limitedDigits.slice(2);
    }
    if (limitedDigits.length > 5) {
        formattedValue = limitedDigits.slice(0, 2) + ' ' + limitedDigits.slice(2, 5) + ' ' + limitedDigits.slice(5);
    }
    if (limitedDigits.length > 8) {
        formattedValue = limitedDigits.slice(0, 2) + ' ' + limitedDigits.slice(2, 5) + ' ' + limitedDigits.slice(5, 8) + ' ' + limitedDigits.slice(8);
    }

    return formattedValue;
};

const getStateClasses = (theme, hasError, isFocused) =>
{
    const baseStyles = {
        input: hasError ? "focus:outline-red-600" : "focus:outline-primary",
        textarea: hasError ? "focus:outline-red-600" : "focus:outline-primary",
        select: hasError ? "focus:outline-red-600 focus:border-none focus:ring-0" : "focus:outline-primary",
        datePicker: hasError ? "focus:outline-red-600 focus:border-none focus:ring-0" : "focus:outline-primary"
    };

    // Theme-specific icon colors
    const getIconColor = (iconType) =>
    {
        if (hasError && isFocused) return "text-red-500";
        if (isFocused) return "text-primary";

        // Different default colors per theme
        if (theme === 'light' || theme === 'legacy-hazard') {
            return iconType === 'selectIcon' ? "text-[#999]" : "text-[#999]";
        } else {
            return iconType === 'selectIcon' ? "text-white" : "text-[#999]";
        }
    };

    const iconStyles = {
        icon: getIconColor('icon'),
        selectIcon: getIconColor('selectIcon'),
        dateIcon: getIconColor('dateIcon'),
    };

    return { ...baseStyles, ...iconStyles };
};

// COMPLETE SelectInput with legacy theme support
export const SelectInput = forwardRef(({
    value,
    onChange,
    onBlur,
    onFocus,
    options = [],
    theme = 'dark',
    hasError = false,
    isFocused = false,
    Icon,
    disabled = false,
    // Legacy theme props
    label,
    footnote,
    ...props
}, ref) =>
{
    const themeConfig = THEMES[theme];

    // Legacy theme rendering
    if (theme === 'legacy-hazard') {
        return (
            <div className={themeConfig.selectContainer}>
                <FaCircle className={themeConfig.bulletPoint} />

                <div className={themeConfig.contentWrapper}>
                    <div className="flex items-start mb-2">
                        <label className={themeConfig.label}>
                            {label}
                        </label>
                    </div>

                    <div className={themeConfig.selectInputContainer}>
                        <Icon className={`${themeConfig.selectIcon} ${hasError && isFocused ? "text-red-500" :
                            isFocused ? "text-primary" : "text-[#999]"
                            }`} />

                        <select
                            ref={ref}
                            className={`${themeConfig.select} ${hasError ? "focus:outline-red-600 focus:border-none focus:ring-0" : "focus:outline-primary"
                                }`}
                            value={value || ''}
                            onChange={onChange}
                            onFocus={onFocus}
                            onBlur={onBlur}
                            disabled={disabled}
                            data-validate="Inline"
                            {...props}
                        >
                            {options.map((option, index) => (
                                <option key={index} value={option.value}>
                                    {option.label}
                                </option>
                            ))}
                        </select>

                        <i className={themeConfig.selectArrow} />
                    </div>

                    {footnote && (
                        <p className={themeConfig.selectFootnote} style={{ textAlign: "left" }}>
                            {footnote}
                        </p>
                    )}
                </div>
            </div>
        );
    }

    // Standard theme rendering
    const stateClasses = getStateClasses(theme, hasError, isFocused);
    return (
        <div className={themeConfig.selectContainer}>
            {Icon && <Icon className={`${themeConfig.selectIcon} ${stateClasses.selectIcon}`} />}
            <select
                ref={ref}
                className={`${themeConfig.select} ${stateClasses.select}`}
                value={value || ''}
                onChange={onChange}
                onFocus={onFocus}
                onBlur={onBlur}
                disabled={disabled}
                {...props}
            >
                {options.map((option, index) => (
                    <option key={index} value={option.value}>
                        {option.label}
                    </option>
                ))}
            </select>
            <i className={themeConfig.selectArrow} />
        </div>
    );
});

// COMPLETE CheckboxGroupInput with legacy theme support
export const CheckboxGroupInput = forwardRef(({
    value,
    onChange,
    onBlur,
    onFocus,
    options = [],
    name,
    theme = 'dark',
    hasError = false,
    isFocused = false,
    variant = 'horizontal',
    label,
    footnote,
    disabled = false,
    currentErrorField,
    setCurrentErrorField,
    ...props
}, ref) =>
{
    const themeConfig = THEMES[theme];

    // Legacy theme rendering with clean focus management
    if (theme === 'legacy-hazard') {
        return (
            <div className={themeConfig.checkboxGroupContainer}>
                <FaCircle className={themeConfig.bulletPoint} />

                <div className={themeConfig.contentWrapper}>
                    <label className={themeConfig.label}>
                        {label}
                    </label>

                    <div className={themeConfig.checkboxGroupWrapper}>
                        {options.map((option, index) => (
                            <LegacyCheckbox
                                key={index}
                                inputRef= { index === 0 ? ref : null}
                                label={option.label}
                                value={option.value}
                                name={name}
                                checked={(value || []).includes(option.value)}
                                onChange={(e) =>
                                {
                                    const currentValues = value || [];
                                    const newValues = e.target.checked
                                        ? [...currentValues, option.value]
                                        : currentValues.filter(val => val !== option.value);
                                    onChange(newValues);
                                }}
                                onFocus={onFocus}
                                onBlur={onBlur}
                                disabled={disabled}
                                currentErrorField={currentErrorField}
                                setCurrentErrorField={setCurrentErrorField}
                                className={themeConfig.checkboxItem}
                            />
                        ))}
                    </div>

                    {footnote && (
                        <p className={themeConfig.checkboxGroupFootnote} style={{ textAlign: "left" }}>
                            {footnote}
                        </p>
                    )}
                </div>
            </div>
        );
    }

    // Standard theme rendering
    const getLayoutConfig = (variant) =>
    {
        switch (variant) {
            case 'grid':
                return {
                    container: "text-left relative",
                    wrapper: "chkbox-container w-full mx-auto text-left relative chkbox-grid grid grid-flow-col place-content-around 1366px:place-content-between grid-rows-5 600px:grid-rows-3",
                    warningPosition: "top-[142px]"
                };
            case 'site-grid':
                return {
                    container: "text-left relative",
                    wrapper: "chkbox-container w-full mx-auto text-left relative chkbox-grid grid grid-flow-col place-content-around gap-1 1366px:place-content-between grid-rows-5 600px:grid-rows-4",
                    warningPosition: "top-[142px]"
                };
            case 'agreement':
                return {
                    container: "text-left relative ",
                    wrapper: "control-wrapper relative w-full flex flex-row justify-left items-center mt-2",
                    warningPosition: "top-12 left-[58px]"
                };
            case 'horizontal':
            default:
                return {
                    container: "text-left relative",
                    wrapper: "control-wrapper relative flex flex-row justify-around items-center w-full mt-2",
                    warningPosition: "top-12 left-[58px]"
                };
        }
    };

    const layoutConfig = getLayoutConfig(variant);

    return (
        <div className={layoutConfig.container}>
            <div className={layoutConfig.wrapper}>
                {options.map((option, index) => (
                    <Checkbox
                        key={index}
                        inputRef={index === 0 ? ref : null}
                        label={option.label}
                        value={option.value}
                        name={name}
                        theme={theme}
                        register={() => ({
                            name,
                            onChange: (e) =>
                            {
                                const currentValues = value || [];
                                const newValues = e.target.checked
                                    ? [...currentValues, option.value]
                                    : currentValues.filter(val => val !== option.value);
                                onChange(newValues);
                            },
                            checked: (value || []).includes(option.value)
                        })}
                        currentErrorField={isFocused ? name : null}
                        setCurrentErrorField={onFocus}
                        className="chkbox float-left text-left relative"
                        {...props}
                    />
                ))}
            </div>
        </div>
    );
});

// Simplified Legacy Checkbox Component - Clean focus handling without delays
const LegacyCheckbox = ({
    value,
    className = "",
    inputRef,
    style = {},
    label,
    name,
    checked,
    onChange,
    onFocus,
    onBlur,
    disabled = false,
    currentErrorField,
    setCurrentErrorField,
}) =>
{
    const [isActive, setIsActive] = useState(false);

    // Clean focus handling without artificial delays
    const handleFocus = () =>
    {
        setIsActive(true);
        if (onFocus) onFocus();
    };

    const handleBlur = (e) =>
    {
        setIsActive(false);
        if (onBlur) onBlur(e);
        // Clear error field if this field is currently the error field
        if (currentErrorField === name && setCurrentErrorField) {
            setCurrentErrorField(null);
        }
    };

    const handleChange = (e) =>
    {
        if (onChange) onChange(e);
    };

    return (
        <div className={`${className} ${styles.checkbox}`} style={style}>
            <input
                type="checkbox"
                name={value}
                value={value}
                checked={checked}
                ref={inputRef}
                onChange={handleChange}
                onFocus={handleFocus}
                onBlur={handleBlur}
                data-validate="CheckboxMulti"
                className="text-sm p-2.5 shadow-none font-montserrat border-none w-[28px] h-[28px] opacity-0 absolute z-40 peer"
                disabled={disabled}
            />

            <label
                className="font-light text-left w-full relative flex cursor-pointer"
                htmlFor={value}
            >
                <span className="w-[28px] h-[28px]"></span>
                <div>{label}</div>
            </label>
        </div>
    );
};


export const DateInput = forwardRef(({
    value,
    onChange,
    onBlur,
    onFocus,
    onEnterPress,
    theme = 'dark',
    hasError = false,
    isFocused = false,
    dayPlaceholder = "DD",
    monthPlaceholder = "MM",
    yearPlaceholder = "YYYY",
    format = "dd/MM/yyyy",
    disabled = false,
    autoComplete = "new-password",
    ...props
}, ref) =>
{

    const datePickerRef = useRef();
    const themeConfig = THEMES[theme];
    const hasAutoFocusedRef = useRef(false);
    const lastCommittedValueRef = useRef(value);

    // Internal state for calendar management
    const [isCalendarOpen, setIsCalendarOpen] = useState(false);
    const [displayValue, setDisplayValue] = useState(value);
    const [isDateSelectedFromCalendar, setIsDateSelectedFromCalendar] = useState(false);
    const [isClient, setIsClient] = useState(false);

    // Handle client-side hydration
    useEffect(() =>
    {
        setIsClient(true);
    }, []);

    // Sync display value with external prop
    useEffect(() =>
    {
        setDisplayValue(value);
        lastCommittedValueRef.current = value;
    }, [value]);

    // Expose focus / scroll
    useImperativeHandle(ref, () => ({
        focus: () =>
        {
            const input = datePickerRef.current?.querySelector('.react-date-picker__inputGroup__input');
            input?.focus();
        },
        scrollIntoView: (options) => datePickerRef.current?.scrollIntoView(options),
        current: datePickerRef.current
    }), []);

    // Auto-focus first input when field becomes focused and has error (only on client)
    useEffect(() =>
    {
        if (!isClient) return;

        if (isFocused && hasError && !hasAutoFocusedRef.current) {
            const firstInput = datePickerRef.current?.querySelector('.react-date-picker__inputGroup__input');
            if (firstInput && document.activeElement !== firstInput) {
                firstInput.focus();
                hasAutoFocusedRef.current = true;
            }
        }
        if (!isFocused) {
            hasAutoFocusedRef.current = false;
        }
    }, [isFocused, hasError, isClient]);

    // Parse typed input from individual input fields
    const getTypedDate = useCallback(() =>
    {
        const inputs = datePickerRef.current?.querySelectorAll(".react-date-picker__inputGroup__input");
        if (!inputs || inputs.length < 3) return null;

        const dayValue = inputs[0].value;
        const monthValue = inputs[1].value;
        const yearValue = inputs[2].value;

        // Require all fields to have values
        if (!dayValue || !monthValue || !yearValue) return null;

        const [day, month, year] = [dayValue, monthValue, yearValue].map(v => parseInt(v, 10));
        if ([day, month, year].some(v => isNaN(v))) return null;

        // Basic validation
        if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year > 9999) return null;

        const parsed = new Date(year, month - 1, day);
        return isNaN(parsed.getTime()) ? null : parsed;
    }, []);

    // Handle the DatePicker's onChange - this fires for both typing and calendar selection
    const handleDatePickerChange = useCallback((newDate) =>
    {
        // Always update display value for visual feedback
        setDisplayValue(newDate);

        // If this is a clear operation (newDate is null), commit immediately
        if (newDate === null) {
            onChange(null);
            lastCommittedValueRef.current = null;
            return;
        }

        // If this change came from calendar selection, commit immediately
        if (isDateSelectedFromCalendar) {
            onChange(newDate);
            lastCommittedValueRef.current = newDate;
            setIsCalendarOpen(false);
            setIsDateSelectedFromCalendar(false);

            // Blur the input after calendar selection
            const activeInput = datePickerRef.current?.querySelector('.react-date-picker__inputGroup__input:focus');
            if (activeInput) {
                activeInput.blur();
            }
        }
        // If typing, just update display - don't commit yet
    }, [onChange, isDateSelectedFromCalendar]);

    // Handle Enter key press
    const handleKeyDown = useCallback((event) =>
    {
        if (event.key === "Enter") {
            event.preventDefault();

            const typedDate = getTypedDate();
            const dateToCommit = typedDate || displayValue;

            // Commit the date
            if (dateToCommit) {
                onChange(dateToCommit);
                lastCommittedValueRef.current = dateToCommit;
                setDisplayValue(dateToCommit);
            }

            // Close calendar and blur
            setIsCalendarOpen(false);
            const activeInput = datePickerRef.current?.querySelector('.react-date-picker__inputGroup__input:focus');
            if (activeInput) {
                activeInput.blur();
            }

            // Trigger callback
            if (onEnterPress) onEnterPress(dateToCommit);
        }
    }, [getTypedDate, displayValue, onChange, onEnterPress]);

    // Handle calendar open - mark that we're ready for calendar selection
    const handleCalendarOpen = useCallback(() =>
    {
        setIsCalendarOpen(true);
    }, []);

    // Handle calendar close
    const handleCalendarClose = useCallback(() =>
    {
        setIsCalendarOpen(false);
        setIsDateSelectedFromCalendar(false);
    }, []);

    // Handle clicks on calendar dates (not month/year navigation)
    const handleCalendarClick = useCallback((event) =>
    {
        // Check if click is on a date button (not navigation)
        const isDateButton = event.target.closest('.react-calendar__tile:not(.react-calendar__navigation button)');
        if (isDateButton) {
            setIsDateSelectedFromCalendar(true);
        }
    }, []);

    // Handle focus events
    const handleFocusEvent = useCallback((event) =>
    {
        if (onFocus) onFocus(event);
    }, [onFocus]);

    // Handle blur events - only when focus completely leaves the component
    const handleBlurEvent = useCallback((event) =>
    {
        // Check if the new focus target is within our component
        const isStillWithinComponent = event.relatedTarget && (
            datePickerRef.current?.contains(event.relatedTarget) ||
            event.relatedTarget.closest('.react-calendar')
        );

        if (!isStillWithinComponent) {
            setIsCalendarOpen(false);
            setIsDateSelectedFromCalendar(false);
            if (onBlur) onBlur(event);
        }
    }, [onBlur]);

    // Add click listener to calendar for date selection detection
    useEffect(() =>
    {
        if (isCalendarOpen) {
            const calendar = document.querySelector('.react-calendar');
            if (calendar) {
                calendar.addEventListener('click', handleCalendarClick);
                return () => calendar.removeEventListener('click', handleCalendarClick);
            }
        }
    }, [isCalendarOpen, handleCalendarClick]);

    // Add click listener to calendar for date selection detection (only on client)
    useEffect(() =>
    {
        if (!isClient || !isCalendarOpen) return;

        const calendar = document.querySelector('.react-calendar');
        if (calendar) {
            calendar.addEventListener('click', handleCalendarClick);
            return () => calendar.removeEventListener('click', handleCalendarClick);
        }
    }, [isCalendarOpen, handleCalendarClick, isClient]);

    // Handle clicks on clear button specifically
    const handleClearClick = useCallback(() =>
    {
        setDisplayValue(null);
        onChange(null);
        lastCommittedValueRef.current = null;
    }, [onChange]);

    // Dynamic colors - use static values during SSR
    const getDividerColor = () =>
    {
        if (!isClient) return '#9CA3AF'; // Default color during SSR
        return displayValue ? '#000000' : '#9CA3AF';
    };

    const getIconColor = () =>
    {
        if (!isClient) return '#999999'; // Default color during SSR
        return hasError && isFocused ? '#dc2626' : isFocused ? '#c7a652' : '#999999';
    };

    const getPlaceholderColor = () => '#9CA3AF';

    const dateInputStyles = `
        .react-date-picker__inputGroup__input { 
            outline: none !important; 
            color: #000000 !important; 
        }
        .react-date-picker__inputGroup__input:focus { 
            outline: ${hasError ? '2px solid #dc2626 !important' : '2px solid #c7a652 !important'}; 
            border-radius: 2px !important; 
            color: #000000 !important; 
        }
        .react-date-picker__inputGroup__divider { 
            color: ${getDividerColor()} !important; 
            transition: color 0.2s ease !important; 
        }
        .react-date-picker__inputGroup__input::placeholder { 
            color: ${getPlaceholderColor()} !important; 
            opacity: 1 !important; 
            transition: color 0.2s ease !important; 
        }
        .react-date-picker__calendar-button svg,
        .react-date-picker__clear-button svg { 
            color: ${getIconColor()} !important; 
            transition: color 0.2s ease !important; 
        }
        .react-date-picker__calendar-button:hover svg,
        .react-date-picker__clear-button:hover svg { 
            color: ${hasError && isFocused ? '#ef4444' : isFocused ? '#c7a652' : '#6B7280'} !important; 
        }
        .react-date-picker__wrapper { 
            height: 19px !important; 
            align-items: center; 
            border: none !important; 
        }
        .react-date-picker__inputGroup { 
            display: flex; 
            align-items: center; 
        }
        .react-date-picker__calendar { 
            position: absolute !important; 
            bottom: 44px !important; 
            left: -2px !important; 
        }
        .react-date-picker__button { 
            padding: 0 !important; 
        }
    `;

    return (
        <div className={themeConfig.datePickerContainer} ref={datePickerRef}>
            <style>{dateInputStyles}</style>
            <DatePicker
                value={displayValue || null}
                onChange={handleDatePickerChange}
                onBlur={handleBlurEvent}
                onFocus={handleFocusEvent}
                onKeyDown={handleKeyDown}
                onCalendarClose={handleCalendarClose}
                onCalendarOpen={handleCalendarOpen}
                isOpen={isCalendarOpen}
                dayPlaceholder={dayPlaceholder}
                monthPlaceholder={monthPlaceholder}
                yearPlaceholder={yearPlaceholder}
                format={format}
                autoComplete={autoComplete}
                className={themeConfig.datePicker}
                calendarIcon={<FaCalendarAlt className="text-[18px] transition-colors duration-200" />}
                clearIcon={displayValue ? <FaTimes className="min-w-[40px] text-[18px] transition-colors duration-200" onClick={handleClearClick} /> : null}
                disabled={disabled}
                {...props}
            />
        </div>
    );
});




// Enhanced Text Input with proper individual state management
export const TextInput = forwardRef(({
    value,
    onChange,
    onBlur,
    onFocus,
    placeholder,
    type = 'text',
    theme = 'dark',
    hasError = false,
    isFocused = false,
    Icon,
    disabled = false,
    required = false,
    autoComplete = "new-password",
    maxLength,
    hidden = false,
    ...props
}, ref) =>
{
    const themeConfig = THEMES[theme];
    const stateClasses = getStateClasses(theme, hasError, isFocused);

    if (hidden) {
        return (
            <input
                ref={ref}
                type="text"
                value={value || ''}
                onChange={onChange}
                onFocus={onFocus}
                onBlur={onBlur}
                style={{ display: "none" }}
                tabIndex={-1}
                autoComplete="off"
                {...props}
            />
        );
    }

    return (
        <div className={themeConfig.inputContainer}>
            <input
                ref={ref}
                className={`${themeConfig.input} ${stateClasses.input}`}
                type={type}
                value={value || ''}
                onChange={onChange}
                onFocus={onFocus}
                onBlur={onBlur}
                placeholder={placeholder}
                maxLength={maxLength}
                autoComplete={autoComplete}
                required={required}
                disabled={disabled}
                {...props}
            />
            {Icon && (
                <Icon className={`${themeConfig.icon} ${stateClasses.icon}`} />
            )}
        </div>
    );
});

// Enhanced ABN Input with proper individual focus management
export const ABNInput = forwardRef(({
    value,
    onChange,
    onBlur,
    onFocus,
    placeholder,
    theme = 'dark',
    hasError = false,
    isFocused = false,
    Icon,
    disabled = false,
    required = false,
    autoComplete = "new-password",
    ...props
}, ref) =>
{
    const inputRef = useRef();
    const themeConfig = THEMES[theme];
    const stateClasses = getStateClasses(theme, hasError, isFocused);

    // Expose focus method to parent
    useImperativeHandle(ref, () => ({
        focus: () =>
        {
            if (inputRef.current) {
                inputRef.current.focus();
            }
        },
        scrollIntoView: (options) => inputRef.current?.scrollIntoView(options),
        current: inputRef.current
    }), []);

    return (
        <div className={themeConfig.inputContainer}>
            <input
                ref={inputRef}
                className={`${themeConfig.input} ${stateClasses.input}`}
                type="text"
                value={formatABN(value) || ""}
                onChange={(e) =>
                {
                    const formatted = formatABN(e.target.value);
                    onChange(formatted);
                }}
                onFocus={onFocus}
                onBlur={onBlur}
                placeholder={placeholder}
                maxLength={14} // For formatted display
                autoComplete={autoComplete}
                required={required}
                disabled={disabled}
                {...props}
            />
            {Icon && (
                <Icon className={`${themeConfig.icon} ${stateClasses.icon}`} />
            )}
        </div>
    );
});



// Enhanced Textarea Input with proper individual focus management
export const TextareaInput = forwardRef(({
    value,
    onChange,
    onBlur,
    onFocus,
    placeholder,
    rows = 3,
    theme = 'dark',
    hasError = false,
    isFocused = false,
    disabled = false,
    required = false,
    autoComplete = "new-password",
    ...props
}, ref) =>
{
    const themeConfig = THEMES[theme];
    const stateClasses = getStateClasses(theme, hasError, isFocused);

    return (
        <textarea
            ref={ref}
            className={`${themeConfig.textarea} ${stateClasses.textarea}`}
            value={value || ''}
            onChange={onChange}
            onFocus={onFocus}
            onBlur={onBlur}
            placeholder={placeholder}
            rows={rows}
            autoComplete={autoComplete}
            disabled={disabled}
            required={required}
            {...props}
        />
    );
});


// Set display names for debugging
TextInput.displayName = 'TextInput';
ABNInput.displayName = 'ABNInput';
DateInput.displayName = 'DateInput';
SelectInput.displayName = 'SelectInput';
TextareaInput.displayName = 'TextareaInput';
CheckboxGroupInput.displayName = 'CheckboxGroupInput';
// /components/common/forms-new/core/UniversalFormField.js - ENHANCED FOR LEGACY THEME
import React from 'react';
import { Controller } from 'react-hook-form';
import WarningPopup from './WarningPopup';
import FieldRenderer from './FieldRenderer';

// Enhanced theme configurations with legacy support
const THEMES = {
    dark: {
        label: "text-white text-base inline-block mt-4 mb-2 w-full text-left",
    },
    light: {
        label: "text-primary-text text-[16px] font-medium inline-block mt-4 mb-2 w-full text-left px-1 768px:px-0",
    },
    // NEW: Legacy theme - labels are handled inside components for proper bullet point layout
    'legacy-hazard': {
        label: null, // Labels are rendered inside specialized components for this theme
    }
};

/**
 * Enhanced UniversalFormField with Legacy Theme Support
 * Handles both standard themes and legacy hazard form theme with pixel-perfect styling
 */
const UniversalFormField = ({
    // Core props
    name,
    control, // ✅ Required - comes from React Hook Form
    type = 'text',
    label,
    hidden = false,

    // Theme
    theme = 'dark',

    // Focus management
    currentFocusField,
    onFieldFocus,
    onFieldBlur,

    // Field-specific props (passed to FieldRenderer)
    placeholder,
    Icon,
    Icon2,
    options = [], // for select
    rows = 3, // for textarea
    maxLength,
    footnote, // NEW: For legacy theme footnotes

    // Date picker specific
    dayPlaceholder = "DD",
    monthPlaceholder = "MM",
    yearPlaceholder = "YYYY",
    format = "dd/MM/yyyy",

    // Checkbox group specific
    variant = 'horizontal',

    // Standard HTML props
    disabled = false,
    required = false,
    autoComplete = "new-password",

    ...otherProps
}) =>
{
    const themeConfig = THEMES[theme];

    if (!control) {
        console.error(`UniversalFormField: 'control' prop is required for field '${name}'`);
        return (
            <div className="text-red-500 p-2 border border-red-500">
                Error: Missing 'control' prop for field '{name}'
            </div>
        );
    }

    return (
        <div className="relative">
            {/* Label - rendered only for non-legacy themes */}
            {label && theme !== 'legacy-hazard' && !hidden && (
                <label className={themeConfig.label}>
                    {label}
                </label>
            )}

            {/* Enhanced Controller with legacy theme support */}
            <Controller
                name={name}
                control={control}
                render={({ field, fieldState }) => (
                    <FieldRenderer
                        type={type}
                        field={field}
                        fieldState={fieldState}
                        currentFocusField={currentFocusField}
                        onFieldFocus={onFieldFocus}
                        onFieldBlur={onFieldBlur}
                        // Pass all props to FieldRenderer
                        placeholder={placeholder}
                        Icon={Icon}
                        Icon2={Icon2}
                        hidden={hidden}
                        theme={theme}
                        options={options}
                        rows={rows}
                        maxLength={maxLength}
                        dayPlaceholder={dayPlaceholder}
                        monthPlaceholder={monthPlaceholder}
                        yearPlaceholder={yearPlaceholder}
                        format={format}
                        disabled={disabled}
                        required={required}
                        autoComplete={autoComplete}
                        variant={variant}
                        // NEW: Legacy theme specific props
                        label={label} // Pass label to component for legacy theme
                        footnote={footnote} // Pass footnote to component
                        {...otherProps}
                    />
                )}
            />

            {/* Enhanced WarningPopup with legacy theme positioning */}
            <Controller
                name={name}
                control={control}
                render={({ fieldState }) => (
                    fieldState?.error && currentFocusField === name && (
                        <WarningPopup
                            error={fieldState.error.message}
                            isFirstError={true}
                            type={type}
                            // NEW: Adjust position for legacy theme
                            className={theme === 'legacy-hazard' ? "top-16" : undefined}
                        />
                    )
                )}
            />
        </div>
    );
};

UniversalFormField.displayName = 'UniversalFormField';

export default UniversalFormField;
import { FaExclamation } from "react-icons/fa";

const WarningPopup = ({ error, isFirstError, className, type }) =>
{
  if (!isFirstError || !error) return null;

  // Default top positions based on field type
  const typePosition = {
    
    textarea: "top-[236px]",  // bigger field
  };

  // Decide which position to use
  const topClass = className || typePosition[type] || "top-24";

  return (
    <span
      role="alert"
      className={`absolute backdrop-blur-lg py-1 px-2 w-auto rounded-md text-[14px] flex items-center bg-white/95 text-black shadow-sm z-10 ${topClass}`}
    >
      {/* Arrow */}
      <span className="absolute left-2 transform translate-x-1/2 -top-1 w-0 h-0 border-l-4 border-r-4 border-b-4 border-transparent border-b-white"></span>

      {/* Icon */}
      <span className="bg-red-500 p-1 rounded-sm mr-2">
        <FaExclamation className="text-[10px] text-white" />
      </span>

      {error}
    </span>
  );
};

export default WarningPopup;
// /hooks/useFormManager.js - COMPLETE FIXED VERSION
import { useState, useCallback, useMemo } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useFocusManager } from './useFocusManager';
import { useFormSubmission } from './useFormSubmission';

/**
 * Enhanced Form Manager with Multi-Step AND Hybrid Support
 * Now includes hybrid form support for Site Info pattern
 */
export const useFormManager = ({
    // Core form configuration
    schema,
    defaultValues = {},
    formType,
    formId,
    onSuccess,
    onError,
    prepareData,
    theme = 'dark',

    // Multi-step configuration
    multiStep = null,

    // NEW: Hybrid form configuration for Site Info pattern
    hybrid = null, // { enabled: true, reviewStep: 3, submitEnabled: false }
}) =>
{
    // Multi-step state management
    const [currentStep, setCurrentStep] = useState(0);
    const [stepData, setStepData] = useState(defaultValues);
    const [completedSteps, setCompletedSteps] = useState(new Set());

    // NEW: Hybrid form state management
    const [submitButtonEnabled, setSubmitButtonEnabled] = useState(
        hybrid?.submitEnabled ?? false
    );
    const [showReviewStep, setShowReviewStep] = useState(false);

    // Form type detection
    const isMultiStep = !!multiStep && multiStep.steps && multiStep.steps.length > 1;
    const isHybrid = !!hybrid && hybrid.enabled;

    // Get current step information
    const getCurrentStep = useCallback(() =>
    {
        if (!isMultiStep) {
            return { currentStep: 0, stepId: 'single', isFirst: true, isLast: true };
        }

        const stepId = multiStep.steps[currentStep];
        const isFirst = currentStep === 0;
        const isLast = currentStep === multiStep.steps.length - 1;

        // NEW: Hybrid-specific logic
        const isReviewStep = isHybrid && stepId === 'review';
        const isSubmitStep = isHybrid && currentStep >= (hybrid.reviewStep || 3);

        return {
            currentStep,
            stepId,
            isFirst,
            isLast,
            // NEW: Hybrid properties
            isReviewStep,
            isSubmitStep,
            submitButtonEnabled,
        };
    }, [isMultiStep, currentStep, multiStep, isHybrid, submitButtonEnabled, hybrid]);

    // Get current schema
    const getCurrentSchema = useCallback(() =>
    {
        if (!isMultiStep) {
            return schema;
        }

        const { stepId } = getCurrentStep();

        if (typeof schema === 'object' && schema[stepId]) {
            return schema[stepId];
        }

        return z.object({});
    }, [schema, isMultiStep, getCurrentStep]);

    // Initialize React Hook Form
    const form = useForm({
        resolver: zodResolver(getCurrentSchema()),
        defaultValues: stepData,
        mode: 'onSubmit',
        reValidateMode: 'onChange',
        shouldFocusError: false,
    });

    const {
        control,
        handleSubmit: rhfHandleSubmit,
        formState: { errors },
        setValue,
        watch,
        getValues,
        reset,
        setFocus
    } = form;

    // Focus and submission management
    const focus = useFocusManager(control);
    const submission = useFormSubmission({
        formType,
        formId,
        onSuccess,
        onError,
        prepareData
    });

    // NEW: Manual step navigation for hybrid forms
    const goToStep = useCallback((targetStep) =>
    {
        if (!isMultiStep) return;

        // Save current form data
        const currentFormData = getValues();
        const updatedStepData = { ...stepData, ...currentFormData };
        setStepData(updatedStepData);

        // Navigate to target step
        setCurrentStep(targetStep);

        // Reset form with updated data
        reset(updatedStepData);

        // Clear focus
        focus.clearFocus();

        console.log(`Manual navigation to step ${targetStep}`, updatedStepData);
    }, [isMultiStep, getValues, stepData, reset, focus]);

    // NEW: Go back one step
    const goBack = useCallback(() =>
    {
        if (currentStep > 0) {
            goToStep(currentStep - 1);
        }
    }, [currentStep, goToStep]);

    // Enhanced step navigation with hybrid support
    const moveToNextStep = useCallback((stepDataUpdate = {}) =>
    {
        const updatedStepData = { ...stepData, ...stepDataUpdate };
        setStepData(updatedStepData);
        setCompletedSteps(prev => new Set([...prev, currentStep]));

        if (!isMultiStep) return updatedStepData;

        // NEW: Hybrid form logic for Site Info pattern
        if (isHybrid) {
            const reviewStep = hybrid.reviewStep || 3;

            if (currentStep === reviewStep - 1) {
                // Moving from last multi-step to review section
                setCurrentStep(reviewStep);
                setSubmitButtonEnabled(true);

                console.log('Hybrid transition: Enabling submit section');
                return updatedStepData;
            }
        }

        // Standard multi-step navigation
        const { stepId } = getCurrentStep();

        if (multiStep.conditional && stepId === 'quote') {
            const services = updatedStepData.Service || [];
            const nextSteps = getNextValidSteps(services);

            if (nextSteps.length === 0) {
                return updatedStepData;
            }

            const nextStepId = nextSteps[0];
            const nextStepIndex = multiStep.steps.findIndex(step => step === nextStepId);
            if (nextStepIndex !== -1) {
                setCurrentStep(nextStepIndex);
            }
        } else {
            const nextStep = currentStep + 1;
            if (nextStep < multiStep.steps.length) {
                setCurrentStep(nextStep);
            }
        }

        return updatedStepData;
    }, [stepData, currentStep, isMultiStep, isHybrid, hybrid, getCurrentStep, multiStep]);

    // Enhanced last step detection with hybrid support - FIXED VERSION
    const isLastStep = useCallback((formDataOverride = null) =>
    {
        if (!isMultiStep) return true;

        // NEW: Hybrid form logic - but allow actual last step to submit
        if (isHybrid) {
            // Check if we're at the actual last step of the multi-step form
            const actualLastStep = currentStep === multiStep.steps.length - 1;

            if (actualLastStep) {
                // This is the actual last step - allow submission
                return true;
            } else {
                // Not the last step yet - continue progression
                return false;
            }
        }

        // Standard multi-step logic
        const { stepId } = getCurrentStep();
        const dataToCheck = formDataOverride || stepData;

        if (multiStep.conditional) {
            const services = dataToCheck.Service || [];

            if (stepId === 'quote') {
                return services.length === 0;
            }

            if (stepId === 'banking') {
                return !services.includes('Change');
            }

            if (stepId === 'change') {
                return true;
            }
        }

        return currentStep === multiStep.steps.length - 1;
    }, [isMultiStep, isHybrid, getCurrentStep, stepData, currentStep, multiStep]);

    // Enhanced validation
    const validateCurrentStep = useCallback((data) =>
    {
        const currentSchema = getCurrentSchema();
        if (!currentSchema) return { success: true };

        return currentSchema.safeParse(data);
    }, [getCurrentSchema]);

    // Enhanced field focus management
    const handleFieldFocus = (fieldName) =>
    {
        console.log(`Enhanced Form Manager: Field focus initiated by ${fieldName}`);
        focus.setFocusField(fieldName);
    };

    const handleFieldBlur = () =>
    {
        console.log(`Enhanced Form Manager: Field blur - clearing focus`);
        focus.clearFocus();
    };

    // Enhanced validation error handler
    const handleValidationError = (validationErrors) =>
    {
        console.log('Step validation failed:', validationErrors);

        const focusSuccess = focus.focusFirstError(validationErrors);

        if (!focusSuccess) {
            const firstErrorField = Object.keys(validationErrors)[0];
            console.log(`Fallback: Using setFocus for ${firstErrorField}`);
            try {
                setFocus(firstErrorField);
            } catch (error) {
                console.warn(`setFocus fallback failed for ${firstErrorField}:`, error);
            }
        }
    };

    // FIXED: Enhanced form submission handler with proper validation blocking
    const handleSubmit = rhfHandleSubmit(
        async (formData) =>
        {
            console.log('Step validation passed:', formData);

            const validation = validateCurrentStep(formData);
            if (!validation.success) {
                console.log('Validation failed, staying on current step');
                handleValidationError(validation.error.flatten().fieldErrors);
                return false; // CRITICAL: Return false to prevent step progression
            }

            const isCurrentlyLastStep = isLastStep(formData);

            if (isCurrentlyLastStep) {
                // Final submission
                const finalStepData = { ...stepData, ...formData };
                console.log('Final submission with data:', finalStepData);
                focus.clearFocus();
                return await submission.handleSubmission(finalStepData);
            } else {
                // Step progression - only if validation passed
                console.log('Moving to next step');
                const updatedStepData = moveToNextStep(formData);
                focus.clearFocus();
                reset(updatedStepData);
                return true; // Indicate successful progression
            }
        },
        (validationErrors) =>
        {
            console.log('React Hook Form validation failed:', validationErrors);
            handleValidationError(validationErrors);
            return false; // CRITICAL: Return false on validation error
        }
    );

    // Enhanced field props helper
    const getFieldProps = useCallback((fieldConfig) =>
    {
        const { name, type = 'text', ...otherConfig } = fieldConfig;

        return {
            ...otherConfig,
            name,
            type,
            control,
            currentFocusField: focus.currentFocusField,
            onFieldFocus: handleFieldFocus,
            onFieldBlur: handleFieldBlur,
        };
    }, [control, focus.currentFocusField, handleFieldFocus, handleFieldBlur]);

    // Get current step data
    const getStepData = useCallback(() =>
    {
        return stepData;
    }, [stepData]);

    // Enhanced reset form with hybrid support
    const resetForm = useCallback(() =>
    {
        setCurrentStep(0);
        setStepData(defaultValues);
        setCompletedSteps(new Set());

        // NEW: Reset hybrid state
        if (isHybrid) {
            setSubmitButtonEnabled(hybrid?.submitEnabled ?? false);
            setShowReviewStep(false);
        }

        reset(defaultValues);
        focus.clearFocus();
        submission.resetSubmission();
    }, [defaultValues, reset, focus, submission, isHybrid, hybrid]);

    // Enhanced progress information with hybrid support
    const getProgress = useMemo(() =>
    {
        if (!isMultiStep) return { current: 1, total: 1, percentage: 100 };

        // NEW: Hybrid progress calculation
        if (isHybrid) {
            const reviewStep = hybrid.reviewStep || 3;
            const total = reviewStep + 1; // Multi-steps + submit step
            const current = currentStep >= reviewStep ? total : currentStep + 1;

            return {
                current,
                total,
                percentage: Math.round((current / total) * 100),
                completed: completedSteps.size,
                isInSubmitSection: currentStep >= reviewStep
            };
        }

        return {
            current: currentStep + 1,
            total: multiStep.steps.length,
            percentage: Math.round(((currentStep + 1) / multiStep.steps.length) * 100),
            completed: completedSteps.size
        };
    }, [isMultiStep, currentStep, multiStep, completedSteps.size, isHybrid, hybrid]);

    // Get next valid steps helper
    const getNextValidSteps = useCallback((services) =>
    {
        if (!isMultiStep || !multiStep.conditional || !multiStep.getNextSteps) {
            return [];
        }
        return multiStep.getNextSteps({ Service: services });
    }, [isMultiStep, multiStep]);

    // Enhanced debug information
    const getDebugInfo = () =>
    {
        return {
            errors: Object.keys(errors),
            currentFocus: focus.currentFocusField,
            isSubmitting: submission.isSubmitting,
            isSubmitted: submission.isSubmitted,
            currentStep,
            stepId: getCurrentStep().stepId,
            stepData: Object.keys(stepData),
            isMultiStep,
            isHybrid,
            isLastStep: isLastStep(),
            submitButtonEnabled,
            showReviewStep,
            ...focus.getFocusDebugInfo()
        };
    };

    return {
        // Core form control
        control,
        handleSubmit,
        errors,

        // Form state
        isSubmitting: submission.isSubmitting,
        isSubmitted: submission.isSubmitted,
        submissionError: submission.submissionError,

        // Focus management
        currentFocusField: focus.currentFocusField,
        focusField: focus.focusField,
        clearFocus: focus.clearFocus,
        isFieldFocused: focus.isFieldFocused,
        handleFieldFocus,
        handleFieldBlur,

        // Form utilities
        setValue,
        watch,
        getValues,
        reset,

        // Helper functions
        getFieldProps,
        hasFieldError: (fieldName) => !!errors[fieldName],
        getFieldError: (fieldName) => errors[fieldName]?.message || null,

        // Multi-step methods
        getCurrentStep,
        getCurrentSchema,
        getStepData,
        isLastStep,
        validateCurrentStep,
        moveToNextStep,
        resetForm,
        getProgress,

        // NEW: Manual navigation methods for hybrid forms
        goToStep,
        goBack,

        // NEW: Hybrid-specific state
        submitButtonEnabled,
        showReviewStep,

        // NEW: Validation error handling
        handleValidationError,

        // Debug utilities
        getDebugInfo,

        // Direct access to hooks
        formMethods: form,
        submissionMethods: submission,
        focusMethods: focus,

        // Theme
        theme
    };
};

// /hooks/useFileUpload.js
import { useState, useCallback } from 'react';
import imageCompression from 'browser-image-compression';
import { fileToBase64 } from '@/utils/apiClient';

export const useFileUpload = ({
    compression = {
        targetSizeKB: 400,
        maxSizeMB: 5,
        allowedTypes: ['image/jpeg', 'image/png', 'image/jpg']
    },
    concurrencyLimit = 2
} = {}) =>
{
    const [isProcessing, setIsProcessing] = useState(false);
    const [fileErrors, setFileErrors] = useState([]);
    const [processingProgress, setProcessingProgress] = useState(0);

    // Progressive image compression
    const compressImageFile = useCallback(async (file) =>
    {
        const targetSizeBytes = compression.targetSizeKB * 1024;

        const compressionLevels = [
            { quality: 0.8, maxWidthOrHeight: 1920 },
            { quality: 0.6, maxWidthOrHeight: 1280 },
            { quality: 0.4, maxWidthOrHeight: 800 },
            { quality: 0.2, maxWidthOrHeight: 600 }
        ];

        console.log(`Compressing ${file.name} (${(file.size / 1024).toFixed(2)}KB)`);

        for (let i = 0; i < compressionLevels.length; i++) {
            const options = {
                maxSizeMB: compression.targetSizeKB / 1024,
                maxWidthOrHeight: compressionLevels[i].maxWidthOrHeight,
                useWebWorker: true,
                quality: compressionLevels[i].quality
            };

            try {
                const compressedFile = await imageCompression(file, options);
                console.log(`Level ${i + 1}: ${(compressedFile.size / 1024).toFixed(2)}KB`);

                if (compressedFile.size <= targetSizeBytes || i === compressionLevels.length - 1) {
                    console.log(`Final: ${(compressedFile.size / 1024).toFixed(2)}KB`);
                    return compressedFile;
                }
            } catch (error) {
                console.error(`Compression level ${i + 1} failed:`, error);
                continue;
            }
        }

        console.warn('All compression failed, using original');
        return file;
    }, [compression]);

    // Process multiple files
    const processFiles = useCallback(async (formData, fileFieldsConfig) =>
    {
        setIsProcessing(true);
        setFileErrors([]);
        setProcessingProgress(0);

        const attachments = [];
        const errors = [];

        try {
            // Process files in batches
            for (let i = 0; i < fileFieldsConfig.length; i += concurrencyLimit) {
                const batch = fileFieldsConfig.slice(i, i + concurrencyLimit);

                const batchPromises = batch.map(async ({ field, prefix }) =>
                {
                    if (formData[field]) {
                        try {
                            const compressedFile = await compressImageFile(formData[field]);
                            const base64File = await fileToBase64(compressedFile);
                            if (base64File) {
                                return {
                                    filename: `${prefix}.${formData[field].name.split('.').pop()}`,
                                    data: base64File
                                };
                            }
                        } catch (error) {
                            errors.push(`${field}: ${error.message}`);
                            return null;
                        }
                    }
                    return null;
                });

                const batchResults = await Promise.all(batchPromises);
                attachments.push(...batchResults.filter(Boolean));

                // Update progress
                setProcessingProgress(Math.round(((i + concurrencyLimit) / fileFieldsConfig.length) * 100));
            }

            if (errors.length > 0) {
                setFileErrors(errors);
                throw new Error(`File processing errors: ${errors.join(', ')}`);
            }

            setProcessingProgress(100);
            return attachments;

        } catch (error) {
            setFileErrors(prev => [...prev, error.message]);
            throw error;
        } finally {
            setIsProcessing(false);
        }
    }, [compressImageFile, concurrencyLimit]);

    // Validate single file
    const validateFile = useCallback((file) =>
    {
        if (!file) return { valid: true };

        const errors = [];

        // Size validation
        if (file.size > compression.maxSizeMB * 1024 * 1024) {
            errors.push(`File too large. Max ${compression.maxSizeMB}MB allowed.`);
        }

        // Type validation
        if (!compression.allowedTypes.includes(file.type)) {
            errors.push(`Invalid file type. Allowed: ${compression.allowedTypes.join(', ')}`);
        }

        return {
            valid: errors.length === 0,
            errors
        };
    }, [compression]);

    // Clear errors
    const clearFileErrors = useCallback(() =>
    {
        setFileErrors([]);
    }, []);

    return {
        // Processing state
        isProcessing,
        processingProgress,
        fileErrors,

        // Main functions
        processFiles,
        compressImageFile,
        validateFile,

        // Utilities
        clearFileErrors
    };
};"use client";
import React, { useState, useRef, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useRouter } from "next/navigation";
import imageCompression from "browser-image-compression";
import FormHeader from "./form-sections/FormHeader";
import PersonalDetailsSection from "./form-sections/PersonalDetailsSection";
import AgreementTermSection from "./form-sections/AgreementTermSection";
import DeedOfGuaranteeSection from "./form-sections/DeedOfGuaranteeSection";
import ExecutedAsDeedSection from "./form-sections/ExecutedAsDeedSection";
import LicensingInsuranceSection from "./form-sections/LicensingInsuranceSection";
import EDocketSystemSection from "./form-sections/EDocketSystemSection";
import DriversSection from "./form-sections/DriversSection";
import { IcaFormSchema } from "@/zod/IcaFormSchema";
import { useFormErrors } from "@/hooks/useFormErrors";
import { useFormSubmission } from "@/hooks/useFormSubmission";
import { useFileUpload } from "@/hooks/useFileUpload";

const COMPANY_INFO = {
  name: "Office Central Pty Ltd",
  acn: "ACN 668 461 050",
  address: "30 Church Hill Road, Old Noarlunga SA 5168",
  email: "sales@securecash.com.au",
};

const LoadingSpinner = () => (
  <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
    <circle
      className="opacity-25"
      cx="12"
      cy="12"
      r="10"
      stroke="currentColor"
      strokeWidth="4"
      fill="none"
    />
    <path
      className="opacity-75"
      fill="currentColor"
      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
    />
  </svg>
);

const SubmitButton = ({ isSubmitting, isSubmitted }) => (
  <button
    type="submit"
    disabled={isSubmitting}
    className={`nextBtn ${
      isSubmitted ? "bg-[#4bb543]" : "bg-[#c6a54b]"
    } text-white border-none py-[15px] px-[50px] text-[17px] cursor-pointer rounded-[40px] outline-none appearance-none hover:opacity-80 text-base p-2.5 shadow-none font-montserrat disabled:opacity-50 disabled:cursor-not-allowed`}
  >
    {isSubmitting ? (
      <span className="flex items-center justify-center gap-2">
        <LoadingSpinner />
        Submitting... Please Wait.
      </span>
    ) : isSubmitted ? (
      "Thank you. We received your submission!"
    ) : (
      "Click here to execute this deed & agreement"
    )}
  </button>
);

const SuccessMessage = () => (
  <div className="text-green-600 font-medium">
    <svg
      className="inline w-5 h-5 mr-2"
      fill="currentColor"
      viewBox="0 0 20 20"
    >
      <path
        fillRule="evenodd"
        d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
        clipRule="evenodd"
      />
    </svg>
    Thank you. We received your submission!
  </div>
);

// Main Form Component
const IndependentContractorsForm = ({
  agreementTermData,
  deedOfGuaranteeData,
}) => {
  const fieldRefs = useRef({});

  const {
    currentErrorField,
    setCurrentErrorField,
    handleFieldErrors,
    submissionError,
    handleSubmissionError,
  } = useFormErrors(fieldRefs.current);

  const { processFiles, isProcessing, fileErrors, processingProgress } =
    useFileUpload({
      compression: {
        targetSizeKB: 400,
        maxSizeMB: 5,
        allowedTypes: ["image/jpeg", "image/png", "image/jpg"],
      },
      concurrencyLimit: 2,
    });
  
  const handleFormSubmit = async (data) =>
  {
    try {
      // Let the submission hook handle everything
      await handleSubmission(data);
    } catch (error) {
      // Error is automatically handled by useFormSubmission and useFormErrors
      console.error("Form submission failed:", error);
    }
  };

  const { isSubmitting, isSubmitted, handleSubmission } = useFormSubmission({
    formType: 'ica',
    formId: 'ICA',
    onSuccess: (result, finalData) =>
    {
      console.log("ICA form submitted successfully!");
      // Could add redirect logic here if needed
    },
    onError: (error) =>
    {
      handleSubmissionError(error);
    },
    prepareData: async (data) =>
    {
      // Process files if any exist
      const fileFieldsConfig = [
        { field: 'GovernmentID', prefix: 'Guarantors Government ID' },
        { field: 'WitnessID', prefix: 'Witness ID' },
        { field: 'SecurityLicense', prefix: 'Security or Masters License' },
        { field: 'CITInsurance', prefix: 'CIT Insurance' }
      ];

      try {
        const attachments = await processFiles(data, fileFieldsConfig);
        return { ...data, attachments };
      } catch (error) {
        console.error("File processing failed:", error);
        throw error; // Will be handled by submission hook
      }
    }
  });

  // 4. Update onError handler for react-hook-form
  const onError = (validationErrors) =>
  {
    console.log("Form validation errors:", validationErrors);
    handleFieldErrors(validationErrors); // This will focus first error field
  };
  const router = useRouter();


  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    watch,
    setValue,
    trigger,
    clearErrors,
  } = useForm({
    resolver: zodResolver(IcaFormSchema),
    mode: "onChange",
  });

  // Watch all form values
  const watchedValues = watch();

  // Function to register field refs
  const registerFieldRef = (fieldName, ref) => {
    if (ref) {
      fieldRefs.current[fieldName] = ref;
    }
  };


  const handleFieldChange = (name, value) => {
    setValue(name, value);
    if (errors[name]) clearErrors(name);
    if (currentErrorField === name) setCurrentErrorField(null);
    trigger(name);
  };


  return (
    <section className="1024px:py-[120px] 768px:bg-[#f2f2f2]">
      <div className="max-w-[1200px] mx-auto">
        <form
          onSubmit={handleSubmit(handleFormSubmit, onError)}
          className="bg-white rounded-lg shadow-lg px-12 py-16 space-y-8"
          noValidate
          autoComplete="off"
        >
          <FormHeader COMPANY_INFO={COMPANY_INFO} />

          <PersonalDetailsSection
            register={register}
            watch={watch}
            setValue={setValue}
            trigger={trigger}
            clearErrors={clearErrors}
            formData={watchedValues}
            handleFieldChange={handleFieldChange}
            currentErrorField={currentErrorField}
            setCurrentErrorField={setCurrentErrorField}
            errors={errors}
            registerFieldRef={registerFieldRef}
          />

          <AgreementTermSection
            agreementTermData={agreementTermData}
            register={register}
            watch={watch}
            setValue={setValue}
            trigger={trigger}
            clearErrors={clearErrors}
            formData={watchedValues}
            handleFieldChange={handleFieldChange}
            currentErrorField={currentErrorField}
            setCurrentErrorField={setCurrentErrorField}
            errors={errors}
            registerFieldRef={registerFieldRef}
          />

          <DeedOfGuaranteeSection
            deedOfGuaranteeData={deedOfGuaranteeData}
            register={register}
            watch={watch}
            setValue={setValue}
            trigger={trigger}
            clearErrors={clearErrors}
            formData={watchedValues}
            handleFieldChange={handleFieldChange}
            currentErrorField={currentErrorField}
            setCurrentErrorField={setCurrentErrorField}
            errors={errors}
            COMPANY_INFO={COMPANY_INFO}
            registerFieldRef={registerFieldRef}
          />

          <ExecutedAsDeedSection
            register={register}
            watch={watch}
            setValue={setValue}
            trigger={trigger}
            clearErrors={clearErrors}
            formData={watchedValues}
            handleFieldChange={handleFieldChange}
            currentErrorField={currentErrorField}
            setCurrentErrorField={setCurrentErrorField}
            errors={errors}
            registerFieldRef={registerFieldRef}
          />

          <LicensingInsuranceSection
            register={register}
            watch={watch}
            setValue={setValue}
            trigger={trigger}
            clearErrors={clearErrors}
            formData={watchedValues}
            handleFieldChange={handleFieldChange}
            currentErrorField={currentErrorField}
            setCurrentErrorField={setCurrentErrorField}
            errors={errors}
            registerFieldRef={registerFieldRef}
          />

          <EDocketSystemSection COMPANY_INFO={COMPANY_INFO} />

          <DriversSection
            register={register}
            watch={watch}
            setValue={setValue}
            trigger={trigger}
            clearErrors={clearErrors}
            formData={watchedValues}
            handleFieldChange={handleFieldChange}
            currentErrorField={currentErrorField}
            setCurrentErrorField={setCurrentErrorField}
            errors={errors}
            registerFieldRef={registerFieldRef}
          />

          <div className="text-center space-y-4">
            <SubmitButton
              isSubmitting={isSubmitting}
              isSubmitted={isSubmitted}
            />
            {isSubmitted && <SuccessMessage />}
          </div>
        </form>
      </div>
    </section>
  );
};

export default IndependentContractorsForm;
import { z } from "zod";



import
{
  InputField,
  SelectionBox,
  FileUpload,
  SectionTitle,
} from "../FormComponents";


import
{
  FaCalendarAlt,
} from "react-icons/fa";
import IcaContractorClauses from "../IcaAgreementClauses";
import WarningPopup from "@/components/common/forms/elements/WarningPopup";
import styles from "@/components/common/checkbox/Checkbox.module.css";
import DatePickerFieldWithRef from "@/components/common/forms/QuoteForm/DatePickerField";

const Checkbox = ({
  value = false, // Default to false to prevent undefined
  className = "",
  style = {},
  register,
  label,
  name,
  errors,
  currentErrorField,
  setCurrentErrorField,
  registerFieldRef,
}) =>
{
  const registerProps = register ? register(name) : {};

  const handleRef = (ref) =>
  {
    // Register with react-hook-form
    if (registerProps.ref) {
      registerProps.ref(ref);
    }
    // Register with field focusing system
    if (registerFieldRef) {
      registerFieldRef(name, ref);
    }
  };

  return (
    <div className={`${className} ${styles.checkbox} relative`} style={style}>
      <input
        type="checkbox"
        name={name}
        checked={Boolean(value)} // Ensure it's always a boolean
        {...registerProps}
        ref={handleRef}
        onFocus={() => setCurrentErrorField && setCurrentErrorField(name)}
        onBlur={() => setCurrentErrorField && setCurrentErrorField(null)}
        data-validate="CheckboxMulti"
        className="text-sm p-2.5 shadow-none font-montserrat border-none w-[28px] h-[28px] opacity-0 absolute z-40 peer"
      />
      <label
        className="font-medium mt-4 text-left w-full relative flex"
        htmlFor={name}
      >
        <span className="w-[28px] h-[28px]"></span>
        <div>
          {label}
        </div>
      </label>
      {errors[name] && (
        <WarningPopup
          error={errors[name]?.message}
          isFirstError={currentErrorField === name}
        />
      )}
    </div>
  );
};

const AgreementTermSection = ({
  register,
  watch,
  setValue,
  trigger,
  clearErrors,
  agreementTermData,
  formData,
  handleFieldChange,
  currentErrorField,
  setCurrentErrorField,
  errors,
}) => (
  <div className="space-y-6 border-b border-dark-border/30 pb-12">
    <SectionTitle Icon={FaCalendarAlt}>Agreement Term</SectionTitle>

    <DatePickerFieldWithRef
      label="This agreement will commence on the?"
      name="DateCommencement"
      value={formData.DateCommencement}

      onChange={(date) =>
      {
        setValue("DateCommencement", date, { shouldValidate: true });
        handleFieldChange('DateCommencement', date);
      }}
      onFocus={setCurrentErrorField}
      onBlur={setCurrentErrorField}
      errors={errors}
      currentErrorField={currentErrorField}
      dayPlaceholder="DD"
      monthPlaceholder="MM"
      yearPlaceholder="YYYY"
      format="dd/MM/yyyy"
    />

    <p className="text-gray-700">
      And will be ongoing unless either party terminates this Agreement in
      accordance with the termination provisions herein (&quot;Expiry&quot;).
    </p>

    <div className="space-y-4">
      <h4 className="text-lg font-semibold text-gray-800">The Agreement</h4>
      <IcaContractorClauses data={agreementTermData} />
      <Checkbox
        label="I understand and accept the terms of this agreement."
        name="AcceptAgreement"
        value={formData.AcceptAgreement}
        register={register}
        currentErrorField={currentErrorField}
        setCurrentErrorField={setCurrentErrorField}
        errors={errors}
      />
    </div>
  </div>
);

export default AgreementTermSection;import
{
  Checkbox,
  InputField,
  SelectionBox,
  FileUpload,
  SectionTitle,
} from "../FormComponents";

import
{
  FaUser,
  FaMapMarkerAlt,
  FaCircle,
  FaCalendarAlt,
  FaFileSignature,
} from "react-icons/fa";
import IcaContractorClauses from "../IcaAgreementClauses";
import DatePickerFieldWithRef from "@/components/common/forms/QuoteForm/DatePickerField";

const DeedOfGuaranteeSection = ({
  register,
  watch,
  setValue,
  trigger,
  clearErrors,
  deedOfGuaranteeData,
  formData,
  handleFieldChange,
  currentErrorField,
  setCurrentErrorField,
  errors,
  COMPANY_INFO,
}) => (
  <div className="space-y-6 border-b border-dark-border/30 pb-12">
    <SectionTitle Icon={FaFileSignature}>Deed of Guarantee</SectionTitle>

    <p className="text-gray-700">
      THIS DEED is made on the day at item 1 of the Schedule
    </p>

    <div className="space-y-4">
      <h4 className="text-lg font-semibold text-gray-800">Recitals:</h4>

      <ul className="text-base text-gray-600 space-y-4 list-inside bg-[rgb(242,242,242,0.9)] p-4 rounded-lg">
        <li className="relative">
          <FaCircle className="text-primary text-[8px] mr-3 flex-shrink-0 absolute top-2" />
          <p className="pl-4">
            The Beneficiary at item 2 of the Schedule has agreed to engage the
            Contractor at item 3 of the Schedule as in the capacity of independent
            contractor.
          </p>
        </li>
        <li className="relative">
          <FaCircle className="text-primary text-[8px] mr-3 flex-shrink-0 absolute top-2" />
          <p className="pl-4">
            The Guarantor at item 4 of the Schedule agrees to guarantee the
            performances by the Contractor of its duties as independent contractor
            in the terms of an agreement in writing on the Beneficiaries website
            at item 5 of the Schedule (the &apos;Duties&apos; and &apos;Duty&apos; in the case of any
            individual duty within the Duties, as the context requires)
          </p>
        </li>
        <li className="relative">
          <FaCircle className="text-primary text-[8px] mr-3 flex-shrink-0 absolute top-2" />
          <p className="pl-4">
            In consideration of the Guarantor entering into this deed with the
            Beneficiary, the Beneficiary agrees to engage and or continue to
            engage the Contractor as independent contractor.
          </p>
        </li>
      </ul>
    </div>

    <div className="space-y-6">
      <h4 className="text-lg font-semibold text-gray-800">Clauses:</h4>
      <IcaContractorClauses data={deedOfGuaranteeData} />

      <DatePickerFieldWithRef
        label="Date of Deed"
        name="DateDeed"
        value={formData.DateDeed}
        onChange={(date) =>
        {
          setValue("DateDeed", date, { shouldValidate: true });
          handleFieldChange('DateDeed', date);
        }}
        onFocus={setCurrentErrorField}
        onBlur={setCurrentErrorField}
        errors={errors}
        currentErrorField={currentErrorField}
        dayPlaceholder="DD"
        monthPlaceholder="MM"
        yearPlaceholder="YYYY"
        format="dd/MM/yyyy"
      />

      <div className="space-y-4">
        <h4 className="text-lg font-semibold text-gray-800">Beneficiary:</h4>
        <div className="bg-[rgb(242,242,242,0.9)] p-4 rounded-lg">
          <p className="text-gray-700">
            {COMPANY_INFO.name.toUpperCase()} of <br />
            {COMPANY_INFO.address}
          </p>
        </div>
      </div>

      <div className="space-y-6">
        <h4 className="text-lg font-semibold text-gray-800">Guarantors:</h4>

        <InputField
          label="What is your full name?"
          name="NameConfirm"
          register={register}
          value={formData.NameConfirm}
          onChange={(value) => handleFieldChange('NameConfirm', value)}
          placeholder="Your Full Name"
          Icon={FaUser}
          currentErrorField={currentErrorField}
          setCurrentErrorField={setCurrentErrorField}
          errors={errors}
        />

        <InputField
          label="Please enter your residential address here:"
          name="AddressResidential"
          register={register}
          value={formData.AddressResidential}
          onChange={(value) => handleFieldChange('AddressResidential', value)}
          placeholder="Your Physical Address"
          Icon={FaMapMarkerAlt}
          currentErrorField={currentErrorField}
          setCurrentErrorField={setCurrentErrorField}
          errors={errors}
        />

        <FileUpload
          label="Please upload any government photo ID unique to yourself, i.e. drivers license."
          name="GovernmentID"
          register={register}
          value={formData.GovernmentID}
          onChange={(value) => handleFieldChange('GovernmentID', value)}
          accept="image/*"
          currentErrorField={currentErrorField}
          setCurrentErrorField={setCurrentErrorField}
          errors={errors}
        />
      </div>
    </div>
  </div>
);

export default DeedOfGuaranteeSection;import { FaClock } from "react-icons/fa";
import {
  Checkbox,
  InputField,
  SelectionBox,
  FileUpload,
  SectionTitle,
} from "../FormComponents";
import VimeoLite from "@/components/VimeoLite";

const EDocketSystemSection = ({ COMPANY_INFO }) => (
  <div className="space-y-6 ">
    <SectionTitle Icon={FaClock}>eDocket System</SectionTitle>

    <div className="bg-[rgb(242,242,242,0.9)] p-6 rounded-lg">
      <p className="text-sm text-gray-700 mb-4">
        You can start using this technology to service your own clients as an
        eDockets Licensee. We know first hand how annoying it is to have a
        mountain of paperwork cluttering your office and dealing with dozens of
        seperate spreadsheets to manage your client listings. With this system
        all the paper work is gone and yet all the information is so much easier
        to access! <br /><br /> eDockets provides you a full database to better manage your
        Operations and providing clients with their own dedicated access to be
        able to manage their own services by booking Extra Pickups, submitting
        their Change Orders and Cancelling a service when it is no longer
        required. You are also able to completely organise your daily operations
        with Run Sheets that feed directly to the Operator in the app and
        Automated Invoicing where charges automatically generate with the
        transactions you perform and instant export at the end of the month,
        just to name a couple of the benefits! <br /><br /> Let us know if you would like
        more information, simply send an email to{" "}
        <a
          href={`mailto:${COMPANY_INFO.email}`}
          className="text-primary underline"
        >
          {COMPANY_INFO.email}{" "}
        </a>
        and check out the video below!{" "}
      </p>

      <div className="aspect-video bg-gray-200 rounded-sm flex items-center justify-center">
        <div className="video-player rounded-lg overflow-hidden w-full h-full">
          <VimeoLite videoId="339048754" />
        </div>
      </div>
    </div>
  </div>
);

export default EDocketSystemSection;
import { FaMapMarkerAlt, FaUser, FaFileContract, FaBuilding } from "react-icons/fa";
import
{
  Checkbox,
  InputField,
  SelectionBox,
  FileUpload,
  SectionTitle,
} from "../FormComponents";

const ExecutedAsDeedSection = ({
  register,
  watch,
  setValue,
  trigger,
  clearErrors,
  formData,
  handleFieldChange,
  currentErrorField,
  setCurrentErrorField,
  errors,
}) => (
  <div className="space-y-6 border-b border-dark-border/30 pb-12">
    <SectionTitle Icon={FaFileContract}>Executed As A Deed</SectionTitle>

    <div className="bg-[rgb(242,242,242,0.9)] p-6 rounded-lg">
      <p className="text-sm text-gray-700 mb-4 font-medium">
        SIGNED, SEALED and DELIVERED by:
      </p>

      <InputField
        label="Please enter your business/company name:"
        name="BusinessName"
        register={register}
        value={formData.BusinessName}
        onChange={(value) => handleFieldChange('BusinessName', value)}
        placeholder="Your Business or Company Name"
        Icon={FaBuilding}
        currentErrorField={currentErrorField}
        setCurrentErrorField={setCurrentErrorField}
        errors={errors}
      />

      <p className="text-xs text-gray-600 mt-4">
        In accordance with its Constitution (if any) as a deed pursuant to
        section 127 of the Corporations Act.
      </p>
    </div>

    <div className="space-y-6">
      <h4 className="text-lg font-semibold text-gray-800">Witness:</h4>
      <p className="text-sm text-gray-600">
        Please provide the details to a person over the age of 18 that can
        witness you completing the required information and authorising this
        Deed of Guarantee:
      </p>

      <InputField
        label="Full name of the witness:"
        name="WitnessName"
        register={register}
        value={formData.WitnessName}
        onChange={(value) => handleFieldChange('WitnessName', value)}
        placeholder="Your Witness's Name"
        Icon={FaUser}
        currentErrorField={currentErrorField}
        setCurrentErrorField={setCurrentErrorField}
        errors={errors}
      />

      <InputField
        label="Please enter the residential address of the witness:"
        name="WitnessAddress"
        register={register}
        value={formData.WitnessAddress}
        onChange={(value) => handleFieldChange('WitnessAddress', value)}
        placeholder="Your Witness's Address"
        Icon={FaMapMarkerAlt}
        currentErrorField={currentErrorField}
        setCurrentErrorField={setCurrentErrorField}
        errors={errors}
      />

      <FileUpload
        label="Please upload any government ID unique to the witness (e.g. driver's license):"
        name="WitnessID"
        register={register}
        value={formData.WitnessId}
        onChange={(value) => handleFieldChange('WitnessID', value)}
        accept="image/*"
        currentErrorField={currentErrorField}
        setCurrentErrorField={setCurrentErrorField}
        errors={errors}
      />
    </div>
  </div>
);

export default ExecutedAsDeedSection;import Divider from '@/components/common/Divider';
import React from 'react'

const FormHeader = ({COMPANY_INFO}) => (
    <div className="text-center border-b border-dark-border/30 pb-12">
        <h1 className="text-[34px] font-bold text-gray-800">
            Independent Contractors Agreement
        </h1>
        <Divider
            color="primary"
            alignment="center"
            margin="mt-5 mb-5"
            responsiveClassName=""
        />
        <h2 className="text-xl text-gray-600 mb-4">
            The parties to this agreement are:
        </h2>
        <div className="bg-[rgb(242,242,242,0.9)] p-6 mt-6 rounded-lg text-left space-y-5">
            <p className="text-gray-700">
                <strong>{COMPANY_INFO.name}</strong> {COMPANY_INFO.acn} of{" "}
                {COMPANY_INFO.address} its assigns, related entities, licensees or
                agents. (hereinafter referred to as &quot;the Principal&quot;)
            </p>
            <p className="text-gray-600 text-center font-medium">And</p>
            <p className="text-gray-700 space-y-3">
                <strong>Independent Contractor&apos;s Personal or Principal Details:</strong>
                <span className="text-sm text-gray-500 block">
                    (The contractor shall be responsible for advising the Principal of any
                    changes to its personal details as initially detailed hereunder)
                </span>
            </p>
        </div>
    </div>
);
  

export default FormHeaderimport { FaShieldAlt } from "react-icons/fa";
import
{
    Checkbox,
    InputField,
    SelectionBox,
    FileUpload,
    SectionTitle,
} from "../FormComponents";

const LicensingInsuranceSection = ({
    register,
    watch,
    setValue,
    trigger,
    clearErrors,
    formData,
    handleFieldChange,
    currentErrorField,
    setCurrentErrorField,
    errors,
}) => (
    <div className="space-y-6 border-b border-dark-border/30 pb-12">
        <SectionTitle Icon={FaShieldAlt}>Licensing & Insurance</SectionTitle>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <FileUpload
                label="Please upload a copy of your Security or Masters License:"
                name="SecurityLicense"
                register={register}
                value={formData.SecurityLicense}
                onChange={(value) => handleFieldChange('SecurityLicense', value)}
                accept="image/*,.pdf"
                currentErrorField={currentErrorField}
                setCurrentErrorField={setCurrentErrorField}
                errors={errors}
            />

            <FileUpload
                label="Please upload a copy of your cash in transit insurance:"
                name="CITInsurance"
                register={register}
                value={formData.CitInsurance}
                onChange={(value) => handleFieldChange('CITInsurance', value)}
                accept="image/*,.pdf"
                currentErrorField={currentErrorField}
                setCurrentErrorField={setCurrentErrorField}
                errors={errors}
            />
        </div>
    </div>
);

export default LicensingInsuranceSection;import
    {
        FaUser,
        FaPhone,
        FaEnvelope,
        FaInfoCircle,
        FaBuilding,
        FaMapMarkerAlt,
        FaIdCard,
    } from "react-icons/fa";
import
    {
        Checkbox,
        InputField,
        SelectionBox,
        FileUpload,
        SectionTitle,
    } from "../FormComponents";

const ORGANIZATION_OPTIONS = [
    { value: "", label: "Please Select" },
    { value: "Individual (Sole Trader)", label: "Individual (Sole Trader)" },
    { value: "Trustees & Beneficiaries", label: "Trustees & Beneficiaries" },
    {
        value: "Domestic Pty Ltd or Ltd Company",
        label: "Domestic Pty Ltd or Ltd Company",
    },
    { value: "Registered Foreign Company", label: "Registered Foreign Company" },
    {
        value: "Foreign Company Not Registered in Australia",
        label: "Foreign Company Not Registered in Australia",
    },
    { value: "Partners & Partnerships", label: "Partners & Partnerships" },
    { value: "Associations", label: "Associations" },
    { value: "Registered Co-Operatives", label: "Registered Co-Operatives" },
    { value: "Government Body", label: "Government Body" },
    {
        value: "School or Education Institute",
        label: "School or Education Institute",
    },
    {
        value: "Church or Religious Organisation",
        label: "Church or Religious Organisation",
    },
];

const PersonalDetailsSection = ({
    register,
    watch,
    setValue,
    trigger,
    clearErrors,
    formData,
    handleFieldChange,
    currentErrorField,
    setCurrentErrorField,
    errors,
}) => (
    <div className="space-y-6 border-b border-dark-border/30 pb-12">
        <SectionTitle Icon={FaUser}>Personal Details</SectionTitle>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <InputField
                label="What is your full name?"
                name="Name"
                register={register}
                value={formData.Name}
                onChange={(value) => handleFieldChange('Name', value)}
                placeholder="Your Full Name"
                Icon={FaUser}
                currentErrorField={currentErrorField}
                setCurrentErrorField={setCurrentErrorField}
                errors={errors}
            />

            <SelectionBox
                label="What is the organisation structure type?"
                name="OrganisationType"
                register={register}
                value={formData.OrganisationType}
                onChange={(value) => handleFieldChange('OrganisationType', value)}
                Icon={FaBuilding}
                options={ORGANIZATION_OPTIONS}
                currentErrorField={currentErrorField}
                setCurrentErrorField={setCurrentErrorField}
                errors={errors}
            />
        </div>

        <div className="grid grid-cols-1 768px:grid-cols-2 1024px:grid-cols-3 gap-6">
            <InputField
                label="What is your ABN number?"
                name="ABN"
                register={register}
                value={formData.ABN}
                onChange={(value) => handleFieldChange('ABN', value)}
                placeholder="Your ABN Number"
                Icon={FaIdCard}
                currentErrorField={currentErrorField}
                setCurrentErrorField={setCurrentErrorField}
                errors={errors}
            />

            <InputField
                label="What is your best contact number?"
                name="Phone"
                register={register}
                value={formData.Phone}
                onChange={(value) => handleFieldChange('Phone', value)}
                placeholder="Your Phone Number"
                type="tel"
                Icon={FaPhone}
                currentErrorField={currentErrorField}
                setCurrentErrorField={setCurrentErrorField}
                errors={errors}
            />

            <InputField
                label="What is your email address?"
                name="Email"
                register={register}
                value={formData.Email}
                onChange={(value) => handleFieldChange('Email', value)}
                placeholder="Your Email Address"
                type="email"
                Icon={FaEnvelope}
                currentErrorField={currentErrorField}
                setCurrentErrorField={setCurrentErrorField}
                errors={errors}
            />
        </div>

        <div className="bg-dark-border/90 p-4 rounded-lg">
            <p className="text-sm text-white">
                <FaInfoCircle className="inline mr-2" />A copy of this agreement will be
                sent to the address provided.
            </p>
        </div>

        <div className="space-y-6">
            <InputField
                label="What is your physical address?"
                name="Address"
                register={register}
                value={formData.Address}
                onChange={(value) => handleFieldChange('Address', value)}
                placeholder="Your Physical Address"
                Icon={FaMapMarkerAlt}
                currentErrorField={currentErrorField}
                setCurrentErrorField={setCurrentErrorField}
                errors={errors}
            />

            <InputField
                label="What is your postal address?"
                name="AddressPostal"
                register={register}
                value={formData.AddressPostal}
                onChange={(value) => handleFieldChange('AddressPostal', value)}
                placeholder="Your Postal Address"
                Icon={FaMapMarkerAlt}
                currentErrorField={currentErrorField}
                setCurrentErrorField={setCurrentErrorField}
                errors={errors}
            />
        </div>
    </div>
);

export default PersonalDetailsSection;import React, { useEffect, useState } from 'react';
import { FaFileUpload, FaFile, FaTimes } from 'react-icons/fa';
import Divider from "@/components/common/Divider";
import WarningPopup from "@/components/common/forms/elements/WarningPopup";


// Input Field Component
export const InputField = ({
    label,
    name,
    placeholder,
    type = "text",
    Icon,
    register,
    errors,
    currentErrorField,
    setCurrentErrorField,
    textarea = false,
    registerFieldRef, // Add this prop for field focusing
}) =>
{
    const hasError = errors[name] && currentErrorField === name;
    const [isFocused, setIsFocused] = useState(false);

    // Get the register props
    const registerProps = register ? register(name) : {};

    // Custom ref handling to support both react-hook-form and field focusing
    const handleRef = (ref) =>
    {
        // Register with react-hook-form
        if (registerProps.ref) {
            registerProps.ref(ref);
        }
        // Register with field focusing system
        if (registerFieldRef) {
            registerFieldRef(name, ref);
        }
    };

    return (
        <div className="relative">
            <label className="text-primary-text text-[16px] font-medium inline-block mt-4 mb-2 w-full text-left px-1 768px:px-0">
                {label}
            </label>
            <div className="relative w-full flex items-center bg-white rounded-[2px] border border-dark-border/50">
                {textarea ? (
                    <textarea
                        className={`w-full text-sm rounded-sm border-none p-4 shadow-none font-montserrat bg-white ${hasError ? "focus:outline-red-600" : "focus:outline-primary"
                            }`}
                        name={name}
                        {...registerProps}
                        ref={handleRef}
                        onFocus={() =>
                        {
                            setCurrentErrorField && setCurrentErrorField(name);
                            setIsFocused(true);
                        }}
                        onBlur={() =>
                        {
                            setCurrentErrorField && setCurrentErrorField(null);
                            setIsFocused(false);
                        }}
                        placeholder={placeholder}
                        rows="3"
                        required
                    />
                ) : (
                    <>
                        <input
                            className={`w-full text-sm py-2 px-3 shadow-none font-montserrat border-none rounded-sm ${hasError ? "focus:outline-red-600" : "focus:outline-primary"
                                }`}
                            type={type}
                            name={name}
                            {...registerProps}
                            ref={handleRef}
                            onFocus={() =>
                            {
                                setCurrentErrorField && setCurrentErrorField(name);
                                setIsFocused(true);
                            }}
                            onBlur={() =>
                            {
                                setCurrentErrorField && setCurrentErrorField(null);
                                setIsFocused(false);
                            }}
                            placeholder={placeholder}
                            required
                        />
                        {Icon && (
                            <Icon
                                className={`min-w-[50px] text-[18px] ${hasError
                                    ? "text-red-500"
                                    : isFocused
                                        ? "text-primary"
                                        : "text-[#999]"
                                    }`}
                            />
                        )}
                    </>
                )}

                {errors[name] && (
                    <WarningPopup
                        error={errors[name]?.message}
                        isFirstError={currentErrorField === name}
                    />
                )}
            </div>
        </div>
    );
};

// Selection Box Component
export const SelectionBox = ({
    label,
    name,
    value,
    onChange,
    setValue,
    Icon,
    options = [],
    register,
    errors = {},
    currentErrorField,
    setCurrentErrorField,
    disabled = false,
    registerFieldRef, // Add this prop for field focusing
}) =>
{
    const hasError = errors[name] && currentErrorField === name;
    const [isFocused, setIsFocused] = useState(false);

    // Get the register props
    const registerProps = register ? register(name) : {};

    // Custom ref handling
    const handleRef = (ref) =>
    {
        if (registerProps.ref) {
            registerProps.ref(ref);
        }
        if (registerFieldRef) {
            registerFieldRef(name, ref);
        }
    };

    const handleChange = (e) =>
    {
        const selectedValue = e.target.value;

        // Call onChange prop if provided
        if (onChange) {
            onChange(selectedValue);
        }

        // Call setValue if provided (for react-hook-form)
        if (setValue) {
            setValue(name, selectedValue, { shouldValidate: true });
        }

        // Clear error state
        if (setCurrentErrorField) {
            setCurrentErrorField(null);
        }
    };

    const handleFocus = () =>
    {
        if (setCurrentErrorField) {
            setCurrentErrorField(name);
        }
        setIsFocused(true);
    };

    const handleBlur = () =>
    {
        if (setCurrentErrorField) {
            setCurrentErrorField(null);
        }
        setIsFocused(false);
    };

    return (
        <div className="relative">
            <label className="text-primary-text text-[16px] font-medium inline-block mt-4 mb-2 w-full text-left px-1 768px:px-0">
                {label}
            </label>
            <div className="input-container input-container-select w-full mx-auto text-left flex items-center relative rounded-[2px] border border-dark-border/50">
                {Icon && (
                    <Icon
                        className={`icon absolute text-[18px] rounded-l min-w-[20px] text-center ml-4 z-10 ${disabled
                            ? "text-[#999] opacity-50"
                            : hasError
                                ? "text-red-500"
                                : isFocused
                                    ? "text-primary"
                                    : "text-[#999]"
                            }`}
                    />
                )}

                <select
                    className={`w-full text-sm rounded-sm border border-white pl-12 pr-12 shadow-none font-montserrat leading-6 h-9 appearance-none bg-white ${disabled
                        ? 'opacity-50 cursor-not-allowed'
                        : hasError
                            ? "focus:outline-red-600 focus:border-red-600 focus:ring-0"
                            : "focus:outline-primary focus:border-primary"
                        }`}
                    {...registerProps}
                    ref={handleRef}
                    value={value || ''}
                    onChange={handleChange}
                    onFocus={handleFocus}
                    onBlur={handleBlur}
                    name={name}
                    disabled={disabled}
                >
                    {options.map((option, index) => (
                        <option key={`${option.value}-${index}`} value={option.value}>
                            {option.label}
                        </option>
                    ))}
                </select>

                {/* Dropdown Arrow */}
                <i className={`rotate-45 inline-block border-solid border-dark-border border-t-0 border-l-0 border-r-2 border-b-2 p-[3px] absolute right-5 top-1/2 transform -translate-y-1/2 pointer-events-none ${disabled ? "opacity-50" : ""
                    }`} />

                {/* Error Popup */}
                {hasError && errors[name] && (
                    <WarningPopup
                        error={errors[name]?.message}
                        isFirstError={currentErrorField === name}
                    />
                )}
            </div>
        </div>
    );
};

// File Upload Component
export const FileUpload = ({
    label,
    name,
    accept = "image/*",
    register,
    errors,
    currentErrorField,
    setCurrentErrorField,
    multiple = false,
    registerFieldRef,
    value, // Add value prop
    onChange, // Add onChange prop
}) =>
{
    const hasError = errors[name] && currentErrorField === name;
    const [dragActive, setDragActive] = useState(false);
    const [uploadedFiles, setUploadedFiles] = useState([]);

    // Reset uploadedFiles when value prop changes (e.g., form reset)
    useEffect(() =>
    {
        if (!value || (Array.isArray(value) && value.length === 0)) {
            setUploadedFiles([]);
        } else if (value) {
            // Handle both single file and multiple files
            const filesArray = Array.isArray(value) ? value : [value];
            // Only set files that are actual File objects
            const validFiles = filesArray.filter(file => file instanceof File);
            setUploadedFiles(validFiles);
        }
    }, [value]);

    // Get the register props
    const registerProps = register ? register(name) : {};

    // Custom ref handling
    const handleRef = (ref) =>
    {
        if (registerProps.ref) {
            registerProps.ref(ref);
        }
        if (registerFieldRef) {
            registerFieldRef(name, ref);
        }
    };

    const handleFileChange = (files) =>
    {
        if (files && files.length > 0) {
            const fileArray = Array.from(files);
            setUploadedFiles(fileArray);

            // Update the form data - this is the key fix
            const fileToSubmit = multiple ? fileArray : fileArray[0];
            if (onChange) {
                onChange(fileToSubmit);
            }

            // Also trigger the register onChange if it exists
            if (registerProps.onChange) {
                const event = {
                    target: {
                        name: name,
                        files: files,
                        value: fileToSubmit
                    }
                };
                registerProps.onChange(event);
            }
        }
    };

    const removeFile = (e, indexToRemove) =>
    {
        e.preventDefault();
        e.stopPropagation();
        const newFiles = uploadedFiles.filter((_, index) => index !== indexToRemove);
        setUploadedFiles(newFiles);

        // Update form data when files are removed
        const fileToSubmit = multiple ? newFiles : (newFiles.length > 0 ? newFiles[0] : null);
        if (onChange) {
            onChange(fileToSubmit);
        }

        // Also trigger the register onChange
        if (registerProps.onChange) {
            const event = {
                target: {
                    name: name,
                    files: newFiles,
                    value: fileToSubmit
                }
            };
            registerProps.onChange(event);
        }
    };

    const handleDragEnter = (e) =>
    {
        e.preventDefault();
        e.stopPropagation();
        setDragActive(true);
    };

    const handleDragLeave = (e) =>
    {
        e.preventDefault();
        e.stopPropagation();
        setDragActive(false);
    };

    const handleDragOver = (e) =>
    {
        e.preventDefault();
        e.stopPropagation();
    };

    const handleDrop = (e) =>
    {
        e.preventDefault();
        e.stopPropagation();
        setDragActive(false);

        const files = e.dataTransfer.files;
        handleFileChange(files);
    };

    const isImageFile = (file) =>
    {
        return file && file.type && file.type.startsWith('image/');
    };

    const getFilePreview = (file) =>
    {
        if (file instanceof File && isImageFile(file)) {
            return URL.createObjectURL(file);
        }
        return null;
    };

    return (
        <div className="relative">
            <label className="text-gray-700 text-[16px] font-medium inline-block mt-4 mb-2 w-full text-left px-1">
                {label}
            </label>
            <div
                className={`relative w-full border-2 border-dashed rounded-lg text-center transition-colors h-[200px] overflow-hidden ${dragActive ? 'border-primary bg-blue-50' : 'border-dark-border/50 bg-white'
                    } ${hasError ? 'border-red-500' : ''}`}
                onDragEnter={handleDragEnter}
                onDragLeave={handleDragLeave}
                onDragOver={handleDragOver}
                onDrop={handleDrop}
            >
                <div className="h-full w-full flex flex-col justify-center items-center bg-[rgb(242,242,242,0.3)] p-4 relative">
                    {uploadedFiles.length === 0 ? (
                        <div className="flex-1 flex flex-col justify-center">
                            <FaFileUpload className="mx-auto text-4xl text-gray-400 mb-4" />
                            <p className="text-sm text-gray-600 mb-2">Click to upload or drag and drop</p>
                            <p className="text-xs text-gray-500">PNG, JPG, PDF up to 10MB</p>
                        </div>
                    ) : (
                        <div className="space-y-3">
                            {uploadedFiles.map((file, index) =>
                            {
                                const previewUrl = getFilePreview(file);
                                return (
                                    <div key={index} className=" rounded">
                                        <button
                                            type="button"
                                            onClick={(e) => removeFile(e, index)}
                                            className="absolute top-4 right-4 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600 z-10"
                                        >
                                            <FaTimes />
                                        </button>

                                        {previewUrl ? (
                                            <div className="flex flex-col items-center">
                                                <img
                                                    src={previewUrl}
                                                    alt={file.name}
                                                    className="w-36 h-24 object-cover rounded mb-2"
                                                />
                                                <span className="text-sm text-gray-700 text-center font-medium">{file.name}</span>
                                                <span className="text-xs text-gray-500">({file.size ? (file.size / 1024).toFixed(1) : '0'} KB)</span>
                                            </div>
                                        ) : (
                                            <div className="flex items-center justify-between">
                                                <div className="flex items-center">
                                                    <FaFile className="text-blue-500 mr-2" />
                                                    <div>
                                                        <span className="text-sm text-gray-700 block">{file.name}</span>
                                                        <span className="text-xs text-gray-500">({file.size ? (file.size / 1024).toFixed(1) : '0'} KB)</span>
                                                    </div>
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                );
                            })}
                        </div>
                    )}
                </div>

                <input
                    type="file"
                    accept={accept}
                    multiple={multiple}
                    {...registerProps}
                    ref={handleRef}
                    onChange={(e) => handleFileChange(e.target.files)}
                    onFocus={() => setCurrentErrorField && setCurrentErrorField(name)}
                    onBlur={() => setCurrentErrorField && setCurrentErrorField(null)}
                    className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                />

                {errors[name] && (
                    <WarningPopup
                        error={errors[name]?.message}
                        isFirstError={currentErrorField === name}
                    />
                )}
            </div>
        </div>
    );
};


import React from 'react';

const TermsListItem = ({ item, isAnnexure = false }) => (
    <li className={isAnnexure ? "annexure-item" : ""}>
        {item.number && <span className="tnc-number absolute left-0 text-[16px] font-semibold text-primary">{item.number}</span>}
        <p className={`${item.wide ? "bullet-wide" : ""} block leading-[2em] pl-[47px] mb-[30px]`}>{item.text}</p>
    </li>
);

const TermsSection = ({ section, isAnnexure = false }) => (
    <>
        {section.title && (
            <div className=" font-semibold leading-[1.6em] mx-auto 992px:text-[18px] pt-4 mb-[24px] 768px:text-left 768px:mx-0 font-montserrat">
                {section.title}
            </div>
        )}
        <ul className={`tnc-page-sa-clauses--content__list list-none font-light relative px-4 1024px:pr-8 ${isAnnexure ? 'annexure-list' : ''}`}>
            {section.items?.map((item, index) => (
                <TermsListItem key={index} item={item} isAnnexure={isAnnexure} />
            ))}
        </ul>
    </>
);

const IcaContractorClauses = ({ data }) =>
{
    return (
        <section className="border border-dark-border/50 py-[18px] px-5">
            <div className="h-auto w-full mx-auto max-h-[642px]   1024px:max-h-[370px] overflow-y-auto ">
                {Object.entries(data || {}).map(([key, section]) =>
                    key !== 'annexureData' && section?.items ? (
                        <TermsSection key={key} section={section} />
                    ) : null
                )}

                {Object.entries(data?.annexureData || {}).map(([key, section]) => (
                    <TermsSection key={key} section={section} isAnnexure={true} />
                ))}
            </div>
        </section>
    );
};

export default IcaContractorClauses;